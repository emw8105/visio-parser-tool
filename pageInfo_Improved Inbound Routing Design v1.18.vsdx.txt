Beginning output
Total number of pages: 11

Page 1:
Shape ID: 1, Type: Shape, Master = null, Text: Delta Dental
Call Flow Legend
Shape ID: 2, Type: Shape, Master = null, Text: Internal Data Access
Shape ID: 3, Type: Shape, Master = null, Text: Process such as updating variables
Shape ID: 4, Type: Shape, Master = null, Text: Used for logic decisions
Shape ID: 5, Type: Shape, Master = 2, Text: Transfer
Shape ID: 6, Type: Shape, Master = null, Text: Transfer to separate flow/queue/voicemail
Shape ID: 7, Type: Shape, Master = null, Text: Prompt/Hold Music in a flow
Shape ID: 8, Type: Shape, Master = 4, Text: Start/End
Shape ID: 9, Type: Shape, Master = null, Text: Start/end of a call flow
Shape ID: 10, Type: Shape, Master = null, Text: External Data Access
Shape ID: 11, Type: Shape, Master = 5, Text: Prompt
Shape ID: 12, Type: Shape, Master = 6, Text: Process Box
Shape ID: 13, Type: Shape, Master = 7, Text: External Data
Shape ID: 14, Type: Shape, Master = 8, Text: Decision Diamonds
Shape ID: 15, Type: Shape, Master = 9, Text: Internal Data
Page 1 has 0 vertices and 0 edges

Graph notation of page 1:
Vertices:

Edges:

Number of paths to test: 0

Page 2:
Shape ID: 1, Type: Shape, Master = 4, Text: Start
Shape ID: 3, Type: Foreign, Master = null
Shape ID: 4, Type: Shape, Master = 7, Text: CTI Persistence Webservice
Shape ID: 5, Type: Shape, Master = 6, Text: IVRNAME_IVR Session ID from SIP Header
Shape ID: 8, Type: Shape, Master = 8, Text: Caller_Verified
Shape ID: 10, Type: Shape, Master = 8, Text: Caller_Type
Shape ID: 11, Type: Shape, Master = 8, Text: Enrollee_Person_ID is not blank
Shape ID: 14, Type: Shape, Master = 7, Text: Repeat Caller Lookup
Shape ID: 16, Type: Shape, Master = 8, Text: First call Resolution Enabled
Shape ID: 18, Type: Shape, Master = 8, Text: Enrollee_Group_and_Division is not blank
Shape ID: 19, Type: Shape, Master = 10, Text: Else
Shape ID: 24, Type: Shape, Master = 9, Text: DNIS TC Logic: Key = TC Flip Key
Shape ID: 26, Type: Shape, Master = 6, Text: Update Data: Transfer Code = New Transfer Code
Shape ID: 27, Type: Shape, Master = 9, Text: Transfer Code Inbound table
Shape ID: 31, Type: Shape, Master = 8, Text: Prepaid Enabled
Shape ID: 32, Type: Shape, Master = 8, Text: isPrePaidGroup == True
Shape ID: 33, Type: Shape, Master = 8, Text: Enrollee_Group_and_Division =/= Blank
Shape ID: 37, Type: Shape, Master = 9, Text: D2C Prepaid
Key = TC Flip Key
Shape ID: 39, Type: Shape, Master = 6, Text: Update Data: BU = Business Unit
Shape ID: 41, Type: Shape, Master = 9, Text: D2C Prepaid Key = TC Flip Key
Shape ID: 45, Type: Shape, Master = 8, Text: Is_Main_TFN=**YES**
&& Is_Group_Transfer=**NO**
&& Is_D2C=**YES**
Shape ID: 48, Type: Shape, Master = 9, Text: Flip GNA
Key = TC Flip Key
Shape ID: 50, Type: Shape, Master = 8, Text: Is_Georgia_GA == True
Shape ID: 52, Type: Shape, Master = 9, Text: TC Flip Data Table
Key = TC Flip Key
Shape ID: 53, Type: Shape, Master = 6, Text: Update Data: Transfer Code = New Transfer Code
Shape ID: 56, Type: Shape, Master = 6, Text: Update Data: Transfer Code = New Transfer Code
Shape ID: 59, Type: Shape, Master = 6, Text: Split Enrollee_Group_and_Division by -
Shape ID: 60, Type: Shape, Master = 6, Text: TC Flip Key = DNIS + Group + Caller_Type + Call_Type + Language
Shape ID: 61, Type: Shape, Master = 6, Text: Update Data: Group = Enrollee_Group_and_Division[0]
Shape ID: 65, Type: Shape, Master = null, Text: When using a split, the variable becomes a list. The number in [*] refer to the index of that list.
Shape ID: 66, Type: Shape, Master = 6, Text: Split Enrollee_Group_and_Division by -
Shape ID: 67, Type: Shape, Master = 6, Text: Update Data: Group = Enrollee_Group_and_Division[0]
Shape ID: 68, Type: Shape, Master = 6, Text: TC Flip Key = BU + Group + Caller_Type + Language
Shape ID: 69, Type: Shape, Master = 6, Text: TC Flip Key = Caller_Type + Transfer Code
Shape ID: 70, Type: Shape, Master = 6, Text: TC Flip Key = Caller_Type + Transfer Code
Shape ID: 73, Type: Shape, Master = 6, Text: TC Flip Key = Caller_Type + Transfer Code
Shape ID: 75, Type: Shape, Master = 6, Text: TC Flip Key = Caller_Type + Transfer Code
Shape ID: 77, Type: Shape, Master = 8, Text: Menu under TransferCode
Shape ID: 83, Type: Shape, Master = null, Text: Delta Dental
Post IVR - Nuance Call Flow
Shape ID: 87, Type: Shape, Master = 2, Text: Transfer to Call Steering
Menu
Shape ID: 88, Type: Shape, Master = 2, Text: Transfer to Call Info
Shape ID: 92, Type: Foreign, Master = null
Shape ID: 94, Type: Foreign, Master = null
Shape ID: 95, Type: Foreign, Master = null
Shape ID: 97, Type: Foreign, Master = null
Shape ID: 98, Type: Shape, Master = 4, Text: End
Shape ID: 99, Type: Shape, Master = 4, Text: End
Page 2 has 41 vertices and 53 edges

Graph notation of page 2:
Vertices:
Vertex: 53, InDegree: 1, OutDegree: 1, Text: Update Data: Transfer Code = New Transfer Code
Vertex: 75, InDegree: 1, OutDegree: 1, Text: TC Flip Key = Caller_Type + Transfer Code
Vertex: 98, InDegree: 1, OutDegree: 0, Text: End
Vertex: 16, InDegree: 1, OutDegree: 2, Text: First call Resolution Enabled
Vertex: 56, InDegree: 1, OutDegree: 1, Text: Update Data: Transfer Code = New Transfer Code
Vertex: 48, InDegree: 1, OutDegree: 2, Text: Flip GNA
Key = TC Flip Key
Vertex: 24, InDegree: 2, OutDegree: 2, Text: DNIS TC Logic: Key = TC Flip Key
Vertex: 73, InDegree: 1, OutDegree: 1, Text: TC Flip Key = Caller_Type + Transfer Code
Vertex: 77, InDegree: 2, OutDegree: 2, Text: Menu under TransferCode
Vertex: 68, InDegree: 1, OutDegree: 1, Text: TC Flip Key = BU + Group + Caller_Type + Language
Vertex: 32, InDegree: 1, OutDegree: 2, Text: isPrePaidGroup == True
Vertex: 99, InDegree: 1, OutDegree: 0, Text: End
Vertex: 14, InDegree: 1, OutDegree: 1, Text: Repeat Caller Lookup
Vertex: 18, InDegree: 3, OutDegree: 2, Text: Enrollee_Group_and_Division is not blank
Vertex: 66, InDegree: 1, OutDegree: 1, Text: Split Enrollee_Group_and_Division by -
Vertex: 39, InDegree: 1, OutDegree: 1, Text: Update Data: BU = Business Unit
Vertex: 87, InDegree: 1, OutDegree: 1, Text: Transfer to Call Steering
Menu
Vertex: 45, InDegree: 1, OutDegree: 2, Text: Is_Main_TFN=**YES**
&& Is_Group_Transfer=**NO**
&& Is_D2C=**YES**
Vertex: 11, InDegree: 1, OutDegree: 2, Text: Enrollee_Person_ID is not blank
Vertex: 10, InDegree: 1, OutDegree: 1, Text: Caller_Type
Vertex: 59, InDegree: 1, OutDegree: 1, Text: Split Enrollee_Group_and_Division by -
Vertex: 5, InDegree: 1, OutDegree: 1, Text: IVRNAME_IVR Session ID from SIP Header
Vertex: 67, InDegree: 1, OutDegree: 1, Text: Update Data: Group = Enrollee_Group_and_Division[0]
Vertex: 92, InDegree: 0, OutDegree: 1, Text: 
Vertex: 37, InDegree: 1, OutDegree: 2, Text: D2C Prepaid
Key = TC Flip Key
Vertex: 1, InDegree: 0, OutDegree: 1, Text: Start
Vertex: 60, InDegree: 1, OutDegree: 1, Text: TC Flip Key = DNIS + Group + Caller_Type + Call_Type + Language
Vertex: 3, InDegree: 1, OutDegree: 0, Text: 
Vertex: 31, InDegree: 1, OutDegree: 2, Text: Prepaid Enabled
Vertex: 41, InDegree: 2, OutDegree: 1, Text: D2C Prepaid Key = TC Flip Key
Vertex: 88, InDegree: 1, OutDegree: 1, Text: Transfer to Call Info
Vertex: 61, InDegree: 1, OutDegree: 1, Text: Update Data: Group = Enrollee_Group_and_Division[0]
Vertex: 27, InDegree: 4, OutDegree: 1, Text: Transfer Code Inbound table
Vertex: 69, InDegree: 1, OutDegree: 1, Text: TC Flip Key = Caller_Type + Transfer Code
Vertex: 52, InDegree: 1, OutDegree: 1, Text: TC Flip Data Table
Key = TC Flip Key
Vertex: 70, InDegree: 1, OutDegree: 1, Text: TC Flip Key = Caller_Type + Transfer Code
Vertex: 8, InDegree: 2, OutDegree: 3, Text: Caller_Verified
Vertex: 4, InDegree: 1, OutDegree: 2, Text: CTI Persistence Webservice
Vertex: 33, InDegree: 1, OutDegree: 2, Text: Enrollee_Group_and_Division =/= Blank
Vertex: 50, InDegree: 6, OutDegree: 2, Text: Is_Georgia_GA == True
Vertex: 26, InDegree: 1, OutDegree: 1, Text: Update Data: Transfer Code = New Transfer Code

Edges:
Edge: 2 connects vertex 1 to vertex 5
Edge: 9 connects vertex 4 to vertex 8
Edge: 7 connects vertex 4 to vertex 3
Edge: 6 connects vertex 5 to vertex 4
Edge: 91 connects vertex 8 to vertex 8
Edge: 12 connects vertex 8 to vertex 10
Edge: 28 connects vertex 8 to vertex 27
Edge: 13 connects vertex 10 to vertex 11
Edge: 15 connects vertex 11 to vertex 16
Edge: 20 connects vertex 11 to vertex 18
Edge: 22 connects vertex 14 to vertex 18
Edge: 17 connects vertex 16 to vertex 14
Edge: 21 connects vertex 16 to vertex 18
Edge: 23 connects vertex 18 to vertex 59
Edge: 29 connects vertex 18 to vertex 27
Edge: 25 connects vertex 24 to vertex 26
Edge: 30 connects vertex 24 to vertex 27
Edge: 58 connects vertex 26 to vertex 27
Edge: 34 connects vertex 27 to vertex 39
Edge: 35 connects vertex 31 to vertex 32
Edge: 47 connects vertex 31 to vertex 45
Edge: 36 connects vertex 32 to vertex 33
Edge: 57 connects vertex 32 to vertex 50
Edge: 38 connects vertex 33 to vertex 66
Edge: 42 connects vertex 33 to vertex 69
Edge: 43 connects vertex 37 to vertex 70
Edge: 44 connects vertex 37 to vertex 50
Edge: 40 connects vertex 39 to vertex 31
Edge: 46 connects vertex 41 to vertex 50
Edge: 86 connects vertex 45 to vertex 50
Edge: 49 connects vertex 45 to vertex 73
Edge: 85 connects vertex 48 to vertex 53
Edge: 84 connects vertex 48 to vertex 50
Edge: 78 connects vertex 50 to vertex 77
Edge: 51 connects vertex 50 to vertex 75
Edge: 55 connects vertex 52 to vertex 56
Edge: 54 connects vertex 53 to vertex 50
Edge: 79 connects vertex 56 to vertex 77
Edge: 62 connects vertex 59 to vertex 61
Edge: 64 connects vertex 60 to vertex 24
Edge: 63 connects vertex 61 to vertex 60
Edge: 80 connects vertex 66 to vertex 67
Edge: 81 connects vertex 67 to vertex 68
Edge: 82 connects vertex 68 to vertex 37
Edge: 72 connects vertex 69 to vertex 41
Edge: 71 connects vertex 70 to vertex 41
Edge: 74 connects vertex 73 to vertex 48
Edge: 76 connects vertex 75 to vertex 52
Edge: 90 connects vertex 77 to vertex 88
Edge: 89 connects vertex 77 to vertex 87
Edge: 101 connects vertex 87 to vertex 98
Edge: 100 connects vertex 88 to vertex 99
Edge: 93 connects vertex 92 to vertex 24

Number of paths to test: 280

Page 3:
Shape ID: 1, Type: Shape, Master = 4, Text: Start/End
Shape ID: 2, Type: Shape, Master = 6, Text: Set Data: Transfer Code
Shape ID: 3, Type: Shape, Master = 6, Text: IVRNAME_IVR Session ID from SIP Header
Shape ID: 4, Type: Shape, Master = 7, Text: CTI Persistence Webservice
Shape ID: 5, Type: Shape, Master = 2, Text: Transfer to Call Info
Shape ID: 10, Type: Shape, Master = 6, Text: Set Data: IVR_Name = EngHouse
Shape ID: 12, Type: Foreign, Master = null
Shape ID: 14, Type: Shape, Master = null, Text: Delta Dental
Post IVR - EngHouse
Shape ID: 16, Type: Shape, Master = 4, Text: End
Page 3 has 8 vertices and 7 edges

Graph notation of page 3:
Vertices:
Vertex: 3, InDegree: 1, OutDegree: 1, Text: IVRNAME_IVR Session ID from SIP Header
Vertex: 4, InDegree: 1, OutDegree: 2, Text: CTI Persistence Webservice
Vertex: 5, InDegree: 1, OutDegree: 1, Text: Transfer to Call Info
Vertex: 10, InDegree: 1, OutDegree: 1, Text: Set Data: IVR_Name = EngHouse
Vertex: 16, InDegree: 1, OutDegree: 0, Text: End
Vertex: 12, InDegree: 1, OutDegree: 0, Text: 
Vertex: 1, InDegree: 0, OutDegree: 1, Text: Start/End
Vertex: 2, InDegree: 1, OutDegree: 1, Text: Set Data: Transfer Code

Edges:
Edge: 6 connects vertex 1 to vertex 3
Edge: 9 connects vertex 2 to vertex 10
Edge: 7 connects vertex 3 to vertex 4
Edge: 13 connects vertex 4 to vertex 12
Edge: 8 connects vertex 4 to vertex 2
Edge: 17 connects vertex 5 to vertex 16
Edge: 11 connects vertex 10 to vertex 5

Number of paths to test: 1

Page 4:
Shape ID: 1, Type: Shape, Master = 4, Text: Start
Shape ID: 2, Type: Shape, Master = 9, Text: Menu Data table
Shape ID: 3, Type: Shape, Master = 8, Text: If Pre-menu Prompt is set or not empty
Shape ID: 4, Type: Shape, Master = 5, Text: Play: Pre-menu Prompt
Shape ID: 5, Type: Shape, Master = 5, Text: Play: Menu Prompt
Shape ID: 6, Type: Shape, Master = 8, Text: Valid Option
Shape ID: 7, Type: Foreign, Master = null
Shape ID: 8, Type: Shape, Master = 5, Text: Play: Retry Prompt 1
Shape ID: 9, Type: Shape, Master = 8, Text: Menu retries =
Shape ID: 10, Type: Shape, Master = 5, Text: Play: Retry Prompt 2
Shape ID: 11, Type: Shape, Master = 5, Text: Play: Retry Prompt 3
Shape ID: 23, Type: Shape, Master = 6, Text: Menu Retries + 1
Shape ID: 28, Type: Shape, Master = 6, Text: Update Data: Default Option
Shape ID: 30, Type: Shape, Master = 6, Text: Update Data: Selected Option
Shape ID: 33, Type: Shape, Master = 8, Text: Option =
Shape ID: 35, Type: Shape, Master = 2, Text: Transfer to Extension
Shape ID: 36, Type: Shape, Master = 2, Text: Transfer to Queue
Shape ID: 37, Type: Shape, Master = 2, Text: Transfer to Voicemail
Shape ID: 38, Type: Shape, Master = 2, Text: Transfer to Sub-Menu
Shape ID: 39, Type: Shape, Master = 2, Text: Transfer to Call Info
Shape ID: 40, Type: Shape, Master = 2, Text: Transfer to External Number
Shape ID: 48, Type: Shape, Master = 5, Text: Play: Message Prompt
Shape ID: 49, Type: Shape, Master = 4, Text: Disconnect
Shape ID: 51, Type: Shape, Master = 6, Text: Set Data: IVR_Name = Menu
Shape ID: 53, Type: Shape, Master = null, Text: Delta Dental
Call Steering - Menu Call Flow
Page 4 has 23 vertices and 28 edges

Graph notation of page 4:
Vertices:
Vertex: 40, InDegree: 1, OutDegree: 0, Text: Transfer to External Number
Vertex: 48, InDegree: 1, OutDegree: 1, Text: Play: Message Prompt
Vertex: 4, InDegree: 1, OutDegree: 1, Text: Play: Pre-menu Prompt
Vertex: 39, InDegree: 1, OutDegree: 0, Text: Transfer to Call Info
Vertex: 3, InDegree: 1, OutDegree: 2, Text: If Pre-menu Prompt is set or not empty
Vertex: 38, InDegree: 1, OutDegree: 0, Text: Transfer to Sub-Menu
Vertex: 23, InDegree: 3, OutDegree: 1, Text: Menu Retries + 1
Vertex: 9, InDegree: 1, OutDegree: 4, Text: Menu retries =
Vertex: 10, InDegree: 1, OutDegree: 1, Text: Play: Retry Prompt 2
Vertex: 1, InDegree: 0, OutDegree: 1, Text: Start
Vertex: 30, InDegree: 1, OutDegree: 1, Text: Update Data: Selected Option
Vertex: 11, InDegree: 1, OutDegree: 1, Text: Play: Retry Prompt 3
Vertex: 28, InDegree: 1, OutDegree: 1, Text: Update Data: Default Option
Vertex: 36, InDegree: 1, OutDegree: 0, Text: Transfer to Queue
Vertex: 6, InDegree: 1, OutDegree: 2, Text: Valid Option
Vertex: 2, InDegree: 1, OutDegree: 1, Text: Menu Data table
Vertex: 51, InDegree: 2, OutDegree: 1, Text: Set Data: IVR_Name = Menu
Vertex: 5, InDegree: 3, OutDegree: 1, Text: Play: Menu Prompt
Vertex: 49, InDegree: 1, OutDegree: 0, Text: Disconnect
Vertex: 37, InDegree: 1, OutDegree: 0, Text: Transfer to Voicemail
Vertex: 8, InDegree: 2, OutDegree: 2, Text: Play: Retry Prompt 1
Vertex: 35, InDegree: 1, OutDegree: 0, Text: Transfer to Extension
Vertex: 33, InDegree: 1, OutDegree: 7, Text: Option =

Edges:
Edge: 12 connects vertex 1 to vertex 2
Edge: 13 connects vertex 2 to vertex 3
Edge: 14 connects vertex 3 to vertex 5
Edge: 15 connects vertex 3 to vertex 4
Edge: 16 connects vertex 4 to vertex 5
Edge: 17 connects vertex 5 to vertex 6
Edge: 31 connects vertex 6 to vertex 30
Edge: 18 connects vertex 6 to vertex 9
Edge: 22 connects vertex 8 to vertex 8
Edge: 26 connects vertex 8 to vertex 23
Edge: 29 connects vertex 9 to vertex 28
Edge: 21 connects vertex 9 to vertex 8
Edge: 20 connects vertex 9 to vertex 10
Edge: 19 connects vertex 9 to vertex 11
Edge: 25 connects vertex 10 to vertex 23
Edge: 27 connects vertex 11 to vertex 23
Edge: 24 connects vertex 23 to vertex 5
Edge: 32 connects vertex 28 to vertex 51
Edge: 34 connects vertex 30 to vertex 51
Edge: 47 connects vertex 33 to vertex 39
Edge: 46 connects vertex 33 to vertex 48
Edge: 45 connects vertex 33 to vertex 35
Edge: 44 connects vertex 33 to vertex 40
Edge: 43 connects vertex 33 to vertex 38
Edge: 42 connects vertex 33 to vertex 37
Edge: 41 connects vertex 33 to vertex 36
Edge: 50 connects vertex 48 to vertex 49
Edge: 52 connects vertex 51 to vertex 33

Number of paths to test: 4

Page 5:
Shape ID: 1, Type: Shape, Master = 4, Text: Start/End
Shape ID: 2, Type: Shape, Master = 6, Text: Set Data: Transfer Code
Shape ID: 3, Type: Shape, Master = 2, Text: Transfer to Call Info
Shape ID: 6, Type: Shape, Master = 6, Text: Set Data: IVR_Name = Direct Call
Shape ID: 8, Type: Shape, Master = 9, Text: DNIS Mapping Data Table
Shape ID: 10, Type: Shape, Master = null, Text: Delta Dental
Direct Calls Call Flow
Shape ID: 11, Type: Shape, Master = 8, Text: Menu is Set
Shape ID: 12, Type: Shape, Master = 2, Text: Transfer to Call Steering - Menu
Shape ID: 15, Type: Foreign, Master = null
Shape ID: 19, Type: Shape, Master = 4, Text: End
Shape ID: 20, Type: Shape, Master = 4, Text: End
Page 5 has 10 vertices and 9 edges

Graph notation of page 5:
Vertices:
Vertex: 20, InDegree: 1, OutDegree: 0, Text: End
Vertex: 11, InDegree: 1, OutDegree: 2, Text: Menu is Set
Vertex: 6, InDegree: 1, OutDegree: 1, Text: Set Data: IVR_Name = Direct Call
Vertex: 3, InDegree: 1, OutDegree: 1, Text: Transfer to Call Info
Vertex: 12, InDegree: 1, OutDegree: 1, Text: Transfer to Call Steering - Menu
Vertex: 19, InDegree: 1, OutDegree: 0, Text: End
Vertex: 2, InDegree: 1, OutDegree: 1, Text: Set Data: Transfer Code
Vertex: 15, InDegree: 1, OutDegree: 0, Text: 
Vertex: 1, InDegree: 0, OutDegree: 1, Text: Start/End
Vertex: 8, InDegree: 1, OutDegree: 2, Text: DNIS Mapping Data Table

Edges:
Edge: 4 connects vertex 1 to vertex 8
Edge: 5 connects vertex 2 to vertex 6
Edge: 17 connects vertex 3 to vertex 19
Edge: 7 connects vertex 6 to vertex 3
Edge: 16 connects vertex 8 to vertex 15
Edge: 9 connects vertex 8 to vertex 11
Edge: 13 connects vertex 11 to vertex 2
Edge: 14 connects vertex 11 to vertex 12
Edge: 18 connects vertex 12 to vertex 20

Number of paths to test: 2

Page 6:
Shape ID: 1, Type: Shape, Master = null, Text: Delta Dental
Transfer Call Flow
Shape ID: 2, Type: Shape, Master = 4, Text: Start
Shape ID: 3, Type: Shape, Master = 9, Text: Transfer Mapping
Shape ID: 4, Type: Foreign, Master = null
Shape ID: 7, Type: Shape, Master = 6, Text: Update Data: Transfer Code = TTValue
Shape ID: 8, Type: Shape, Master = 6, Text: Split TC or EX:Extension by :
Shape ID: 9, Type: Shape, Master = 8, Text: If(TTValue[0] = Ex
Shape ID: 10, Type: Shape, Master = null, Text: TTValue can be: Transfer Code or Ex:000-000-0000
Shape ID: 11, Type: Shape, Master = 2, Text: Transfer to TTValue[1]
Shape ID: 15, Type: Shape, Master = 2, Text: Transfer to Call Info
Shape ID: 18, Type: Shape, Master = 6, Text: Update Data: Xfer_Queue = Targeted Queue
Shape ID: 20, Type: Shape, Master = 4, Text: End
Shape ID: 23, Type: Shape, Master = 4, Text: End
Page 6 has 11 vertices and 10 edges

Graph notation of page 6:
Vertices:
Vertex: 23, InDegree: 1, OutDegree: 0, Text: End
Vertex: 2, InDegree: 0, OutDegree: 1, Text: Start
Vertex: 11, InDegree: 1, OutDegree: 1, Text: Transfer to TTValue[1]
Vertex: 7, InDegree: 1, OutDegree: 1, Text: Update Data: Transfer Code = TTValue
Vertex: 8, InDegree: 1, OutDegree: 1, Text: Split TC or EX:Extension by :
Vertex: 20, InDegree: 1, OutDegree: 0, Text: End
Vertex: 9, InDegree: 1, OutDegree: 2, Text: If(TTValue[0] = Ex
Vertex: 18, InDegree: 1, OutDegree: 1, Text: Update Data: Xfer_Queue = Targeted Queue
Vertex: 3, InDegree: 1, OutDegree: 2, Text: Transfer Mapping
Vertex: 15, InDegree: 1, OutDegree: 1, Text: Transfer to Call Info
Vertex: 4, InDegree: 1, OutDegree: 0, Text: 

Edges:
Edge: 16 connects vertex 2 to vertex 18
Edge: 5 connects vertex 3 to vertex 4
Edge: 6 connects vertex 3 to vertex 8
Edge: 17 connects vertex 7 to vertex 15
Edge: 12 connects vertex 8 to vertex 9
Edge: 14 connects vertex 9 to vertex 11
Edge: 13 connects vertex 9 to vertex 7
Edge: 24 connects vertex 11 to vertex 23
Edge: 21 connects vertex 15 to vertex 20
Edge: 19 connects vertex 18 to vertex 3

Number of paths to test: 2

Page 7:
Shape ID: 1, Type: Shape, Master = 9, Text: Transfer Code Inbound table
Shape ID: 2, Type: Shape, Master = 6, Text: Update Data: Call_Type = Force Call_Type
Shape ID: 3, Type: Shape, Master = 8, Text: Force Call_Type == Empty
Shape ID: 4, Type: Shape, Master = 6, Text: Update Data: Call_Type = Table Call_Type
Shape ID: 5, Type: Shape, Master = 6, Text: Update Data: Caller_Type = Force Caller_Type
Shape ID: 6, Type: Shape, Master = 8, Text: Force Caller_Type == Empty
Shape ID: 7, Type: Shape, Master = 6, Text: Update Data: Caller_Type = Table Caller_Type
Shape ID: 14, Type: Shape, Master = 6, Text: Update Data: BU = Business Unit
Shape ID: 15, Type: Shape, Master = 6, Text: Update Data: Language = Language
Shape ID: 19, Type: Shape, Master = 6, Text: Update Data: BU_CallerType_CallType_Language = Business Unit + Caller_Type + Call_Type+ Language
Shape ID: 21, Type: Shape, Master = 4, Text: Start
Shape ID: 22, Type: Shape, Master = 8, Text: Greeting Flag = Yes
Shape ID: 23, Type: Shape, Master = 5, Text: Play: Greeting Message
Shape ID: 25, Type: Shape, Master = 2, Text: Transfer to Operational Check
Shape ID: 28, Type: Shape, Master = 8, Text: Transfer Code Inbound table values empty?
Shape ID: 29, Type: Shape, Master = 6, Text: Set Data: Empty Values = BU values
Shape ID: 33, Type: Shape, Master = 9, Text: BU_CallerType_CallType_Language Inbound table
Shape ID: 36, Type: Shape, Master = null, Text: Table values that share a name with variables are referred to as Table *. EX: Table Call_Type
Shape ID: 37, Type: Shape, Master = 8, Text: Call_Type isNotSetorEmpty
Shape ID: 39, Type: Shape, Master = 8, Text: Caller_Type isNotSetorEmpty
Shape ID: 41, Type: Shape, Master = 8, Text: Caller_Type == Valid Caller_Type
Shape ID: 42, Type: Shape, Master = 6, Text: Update Data: Caller_Type = Table Caller_Type
Shape ID: 49, Type: Shape, Master = null, Text: Delta Dental
Call Info Call Flow
Shape ID: 51, Type: Shape, Master = 8, Text: Interaction_Type = Transfer
Shape ID: 52, Type: Shape, Master = 6, Text: Set Data: BU Display = BU Display + “ to ” Agent ID
Shape ID: 57, Type: Shape, Master = 6, Text: Set Data: BU Display = Business Unit
Shape ID: 62, Type: Foreign, Master = null
Shape ID: 64, Type: Foreign, Master = null
Shape ID: 1003, Type: Shape, Master = 9, Text: ANI  Inbound table
Shape ID: 65, Type: Foreign, Master = null
Shape ID: 1004, Type: Shape, Master = 8, Text: ANI Inbound table values empty?
Shape ID: 1005, Type: Shape, Master = 6, Text: Set Data: Empty Values = TC values
Shape ID: 1012, Type: Shape, Master = 4, Text: End
Page 7 has 28 vertices and 36 edges

Graph notation of page 7:
Vertices:
Vertex: 6, InDegree: 3, OutDegree: 2, Text: Force Caller_Type == Empty
Vertex: 7, InDegree: 1, OutDegree: 1, Text: Update Data: Caller_Type = Table Caller_Type
Vertex: 21, InDegree: 0, OutDegree: 1, Text: Start
Vertex: 1, InDegree: 1, OutDegree: 1, Text: Transfer Code Inbound table
Vertex: 14, InDegree: 4, OutDegree: 1, Text: Update Data: BU = Business Unit
Vertex: 1005, InDegree: 1, OutDegree: 1, Text: Set Data: Empty Values = TC values
Vertex: 19, InDegree: 1, OutDegree: 1, Text: Update Data: BU_CallerType_CallType_Language = Business Unit + Caller_Type + Call_Type+ Language
Vertex: 42, InDegree: 1, OutDegree: 1, Text: Update Data: Caller_Type = Table Caller_Type
Vertex: 52, InDegree: 1, OutDegree: 1, Text: Set Data: BU Display = BU Display + “ to ” Agent ID
Vertex: 23, InDegree: 1, OutDegree: 1, Text: Play: Greeting Message
Vertex: 1003, InDegree: 1, OutDegree: 1, Text: ANI  Inbound table
Vertex: 29, InDegree: 1, OutDegree: 1, Text: Set Data: Empty Values = BU values
Vertex: 4, InDegree: 1, OutDegree: 1, Text: Update Data: Call_Type = Table Call_Type
Vertex: 22, InDegree: 2, OutDegree: 2, Text: Greeting Flag = Yes
Vertex: 57, InDegree: 1, OutDegree: 1, Text: Set Data: BU Display = Business Unit
Vertex: 41, InDegree: 1, OutDegree: 2, Text: Caller_Type == Valid Caller_Type
Vertex: 2, InDegree: 1, OutDegree: 1, Text: Update Data: Call_Type = Force Call_Type
Vertex: 51, InDegree: 2, OutDegree: 2, Text: Interaction_Type = Transfer
Vertex: 37, InDegree: 1, OutDegree: 2, Text: Call_Type isNotSetorEmpty
Vertex: 28, InDegree: 1, OutDegree: 2, Text: Transfer Code Inbound table values empty?
Vertex: 3, InDegree: 2, OutDegree: 2, Text: Force Call_Type == Empty
Vertex: 25, InDegree: 2, OutDegree: 1, Text: Transfer to Operational Check
Vertex: 33, InDegree: 1, OutDegree: 1, Text: BU_CallerType_CallType_Language Inbound table
Vertex: 5, InDegree: 1, OutDegree: 1, Text: Update Data: Caller_Type = Force Caller_Type
Vertex: 15, InDegree: 1, OutDegree: 1, Text: Update Data: Language = Language
Vertex: 39, InDegree: 1, OutDegree: 2, Text: Caller_Type isNotSetorEmpty
Vertex: 1012, InDegree: 1, OutDegree: 0, Text: End
Vertex: 1004, InDegree: 1, OutDegree: 2, Text: ANI Inbound table values empty?

Edges:
Edge: 48 connects vertex 1 to vertex 1004
Edge: 10 connects vertex 2 to vertex 6
Edge: 9 connects vertex 3 to vertex 2
Edge: 8 connects vertex 3 to vertex 37
Edge: 11 connects vertex 4 to vertex 6
Edge: 16 connects vertex 5 to vertex 14
Edge: 12 connects vertex 6 to vertex 39
Edge: 13 connects vertex 6 to vertex 5
Edge: 18 connects vertex 7 to vertex 14
Edge: 17 connects vertex 14 to vertex 15
Edge: 20 connects vertex 15 to vertex 19
Edge: 34 connects vertex 19 to vertex 33
Edge: 1010 connects vertex 21 to vertex 1003
Edge: 24 connects vertex 22 to vertex 23
Edge: 26 connects vertex 22 to vertex 25
Edge: 27 connects vertex 23 to vertex 25
Edge: 1011 connects vertex 25 to vertex 1012
Edge: 30 connects vertex 28 to vertex 29
Edge: 31 connects vertex 28 to vertex 51
Edge: 32 connects vertex 29 to vertex 51
Edge: 35 connects vertex 33 to vertex 28
Edge: 38 connects vertex 37 to vertex 4
Edge: 47 connects vertex 37 to vertex 6
Edge: 40 connects vertex 39 to vertex 7
Edge: 46 connects vertex 39 to vertex 41
Edge: 43 connects vertex 41 to vertex 14
Edge: 44 connects vertex 41 to vertex 42
Edge: 45 connects vertex 42 to vertex 14
Edge: 53 connects vertex 51 to vertex 57
Edge: 54 connects vertex 51 to vertex 52
Edge: 55 connects vertex 52 to vertex 22
Edge: 58 connects vertex 57 to vertex 22
Edge: 1009 connects vertex 1003 to vertex 1
Edge: 1006 connects vertex 1004 to vertex 1005
Edge: 1007 connects vertex 1004 to vertex 3
Edge: 1008 connects vertex 1005 to vertex 3

Number of paths to test: 192

Page 8:
Shape ID: 1, Type: Shape, Master = 4, Text: Start
Shape ID: 2, Type: Shape, Master = 8, Text: Evaluate Schedule
Shape ID: 3, Type: Shape, Master = 6, Text: Update Data: scheduleState = _Open
Shape ID: 4, Type: Shape, Master = 6, Text: Update Data: scheduleState =_Closed
Shape ID: 5, Type: Shape, Master = 6, Text: Update Data: scheduleState=_Emergency
Shape ID: 6, Type: Shape, Master = 6, Text: Update Data: scheduleState=_Holiday
Shape ID: 12, Type: Shape, Master = 8, Text: Emergency Flag = Yes
Shape ID: 18, Type: Shape, Master = 6, Text: Update Data: scheduleState=_Emergency
Shape ID: 19, Type: Shape, Master = 6, Text: Update Data:
opCheck = BU_CallerType_CallType_Language + scheduleState
Shape ID: 20, Type: Shape, Master = 6, Text: Update Data: BU Variables
Shape ID: 21, Type: Shape, Master = 9, Text: Transfer Code Operational Routing
Shape ID: 22, Type: Shape, Master = 6, Text: Update Data: TC Variables
Shape ID: 27, Type: Shape, Master = 8, Text: Any TC Variables == Empty
Shape ID: 28, Type: Shape, Master = 6, Text: Update Date: Empty Values = BU Variables
Shape ID: 31, Type: Shape, Master = 8, Text: Transfer Flag Enabled
Shape ID: 32, Type: Shape, Master = 5, Text: Play Prompt: Transfer Prompt
Shape ID: 33, Type: Shape, Master = 2, Text: Transfer: Transfer Number
Shape ID: 34, Type: Shape, Master = 5, Text: Play Prompt: Error Prompt
Shape ID: 35, Type: Shape, Master = 4, Text: Disconnect
Shape ID: 36, Type: Shape, Master = 8, Text: Voicemail Flag Enabled
Shape ID: 37, Type: Shape, Master = 5, Text: Play Prompt: Voicemail Prompt
Shape ID: 38, Type: Shape, Master = 2, Text: Transfer: Voicemail Queue
Shape ID: 39, Type: Shape, Master = 5, Text: Play Prompt: Message Prompt
Shape ID: 52, Type: Shape, Master = 6, Text: Update Data:
opCheck = BU_CallerType_CallType_Language + scheduleState
Shape ID: 53, Type: Shape, Master = 6, Text: Get Data: Force QM Flag
Shape ID: 54, Type: Shape, Master = 6, Text: Get Data: Survey Enabled
Shape ID: 56, Type: Shape, Master = 6, Text: Get Data:  Survey Prompt
Shape ID: 57, Type: Shape, Master = 6, Text: Get Data:  Survey Code
Shape ID: 58, Type: Shape, Master = 6, Text: Get Data: Priority
Shape ID: 59, Type: Shape, Master = 6, Text: Get Data: KVPs
Shape ID: 66, Type: Shape, Master = 6, Text: Get Data: Queue
Shape ID: 68, Type: Shape, Master = 8, Text: IVR_Name = Nuance
Shape ID: 70, Type: Shape, Master = 6, Text: Get Data: QM Message
Shape ID: 72, Type: Shape, Master = 8, Text: Force QM Flag = Y
Shape ID: 73, Type: Shape, Master = 5, Text: Play Prompt: QM Message
Shape ID: 74, Type: Shape, Master = 5, Text: Play Prompt: QM Message
Shape ID: 79, Type: Shape, Master = 6, Text: Set Data: QM_Heard = Y
Shape ID: 80, Type: Shape, Master = 6, Text: Set Data: QM_Heard = Y
Shape ID: 81, Type: Shape, Master = 6, Text: Set Data: QM_Heard = N
Shape ID: 82, Type: Shape, Master = 6, Text: Set Data: QM_Heard = N
Shape ID: 96, Type: Shape, Master = 9, Text: BU_CallerType_CallType_Language Operational Routing
Shape ID: 99, Type: Shape, Master = 6, Text: Set Priority
Shape ID: 101, Type: Foreign, Master = null
Shape ID: 102, Type: Foreign, Master = null
Shape ID: 105, Type: Shape, Master = 8, Text: QM_Heard = Y
Shape ID: 108, Type: Shape, Master = null, Text: Delta Dental
Operation Checks Call Flow
Shape ID: 109, Type: Shape, Master = 6, Text: GetEWT(Queue)
Shape ID: 114, Type: Shape, Master = 9, Text: EWT Data Table
Shape ID: 115, Type: Shape, Master = null, Text: EWT ranges will have three values. EX: 0,3:PromptName
Shape ID: 116, Type: Shape, Master = 6, Text: Split EWT Range * by :
Shape ID: 117, Type: Shape, Master = 6, Text: Split R*Range by ,
Shape ID: 118, Type: Shape, Master = 6, Text: Update Data: R*Range = Range 1[0]
Shape ID: 119, Type: Shape, Master = 6, Text: Update Data: R*Prompt = Range 1[1]
Shape ID: 120, Type: Shape, Master = 6, Text: Update Data: R*Lower = R*Range[0]
Shape ID: 121, Type: Shape, Master = 6, Text: Update Data: R*Upper = R*Range[1]
Shape ID: 129, Type: Shape, Master = null, Text: When using a split, the variable becomes a list. The number in [*] refer to the index of that list.
Shape ID: 130, Type: Shape, Master = 8, Text: If( EWT >= R1Lower AND EWT < R1Higher)
Shape ID: 131, Type: Shape, Master = 5, Text: Play Prompt: R1Prompt
Shape ID: 132, Type: Shape, Master = 8, Text: If( EWT >= R4Lower AND EWT < R4Higher)
Shape ID: 133, Type: Shape, Master = 5, Text: Play Prompt: R4Prompt
Shape ID: 134, Type: Shape, Master = 8, Text: If( EWT >= R2Lower AND EWT < R2Higher)
Shape ID: 135, Type: Shape, Master = 5, Text: Play Prompt: R2Prompt
Shape ID: 136, Type: Shape, Master = 8, Text: If( EWT >= R3Lower AND EWT < R3Higher)
Shape ID: 137, Type: Shape, Master = 5, Text: Play Prompt: R3Prompt
Shape ID: 138, Type: Shape, Master = 8, Text: Switch – Take first that is true
Shape ID: 139, Type: Shape, Master = 8, Text: If( EWT >= R*Lower AND EWT < R*Higher)
Shape ID: 140, Type: Shape, Master = 5, Text: Play Prompt: R*Prompt
Shape ID: 151, Type: Shape, Master = null, Text: Replace the * with the number of the range. Action is repeated for all 10 EWT Ranges
Shape ID: 152, Type: Foreign, Master = null
Shape ID: 155, Type: Shape, Master = 6, Text: Set Data: FirstEWT = EWT
Shape ID: 157, Type: Shape, Master = 8, Text: Callback Flag
Shape ID: 160, Type: Shape, Master = 8, Text: If(R*Prompt = N)
Shape ID: 163, Type: Shape, Master = 8, Text: Callback Schedule
Shape ID: 166, Type: Shape, Master = 8, Text: Callback Threshold
Shape ID: 169, Type: Shape, Master = 2, Text: Transfer: Trigger Proactive Callback
Shape ID: 170, Type: Foreign, Master = null
Shape ID: 171, Type: Shape, Master = 6, Text: Calculate Delay
Shape ID: 174, Type: Shape, Master = 6, Text: Set Delay: ToString(ToInt(Task.intSeconds/60))
Shape ID: 176, Type: Shape, Master = null, Text: See Callback Solution
Shape ID: 187, Type: Shape, Master = 2, Text: Transfer: Queue
Shape ID: 188, Type: Shape, Master = 8, Text: Callback Offer
Shape ID: 1006, Type: Shape, Master = 9, Text: Agent Status Check
Shape ID: 1007, Type: Shape, Master = 8, Text: Pcount = 0
Shape ID: 1048, Type: Shape, Master = 9, Text: Queue Groups
Shape ID: 1053, Type: Shape, Master = 8, Text: Overnight Schedule
Shape ID: 1056, Type: Shape, Master = 8, Text: Ocount > 0
Shape ID: 1065, Type: Shape, Master = 10, Text: Open
Shape ID: 1075, Type: Shape, Master = 6, Text: Update Data: BU Variables
Shape ID: 1076, Type: Shape, Master = 9, Text: Transfer Code Operational Routing
Shape ID: 1077, Type: Shape, Master = 6, Text: Update Data: TC Variables
Shape ID: 1080, Type: Shape, Master = 8, Text: Any TC Variables == Empty
Shape ID: 1081, Type: Shape, Master = 6, Text: Update Date: Empty Values = BU Variables
Shape ID: 1084, Type: Shape, Master = 8, Text: Transfer Flag Enabled
Shape ID: 1085, Type: Shape, Master = 5, Text: Play Prompt: Transfer Prompt
Shape ID: 1086, Type: Shape, Master = 2, Text: Transfer: Transfer Number
Shape ID: 1087, Type: Shape, Master = 5, Text: Play Prompt: Error Prompt
Shape ID: 1088, Type: Shape, Master = 4, Text: Disconnect
Shape ID: 1089, Type: Shape, Master = 8, Text: Voicemail Flag Enabled
Shape ID: 1090, Type: Shape, Master = 5, Text: Play Prompt: Voicemail Prompt
Shape ID: 1091, Type: Shape, Master = 2, Text: Transfer: Voicemail Queue
Shape ID: 1092, Type: Shape, Master = 5, Text: Play Prompt: Message Prompt
Shape ID: 1106, Type: Shape, Master = 9, Text: BU_CallerType_CallType_Language Operational Routing
Shape ID: 194, Type: Foreign, Master = null
Shape ID: 195, Type: Foreign, Master = null
Shape ID: 1110, Type: Shape, Master = 6, Text: Update Data: scheduleState =_noAgents
Shape ID: 1119, Type: Shape, Master = 8, Text: Survey Enabled = Y
Shape ID: 1120, Type: Shape, Master = 5, Text: Play Prompt: Survey Prompt
Shape ID: 1124, Type: Shape, Master = 8, Text: FCR Enabled
Shape ID: 1125, Type: Shape, Master = 8, Text: Caller_Type = Enrollee
Shape ID: 1128, Type: Shape, Master = 7, Text: FCR Action
Shape ID: 1132, Type: Shape, Master = 8, Text: Enrollee_Person_ID is not empty
Shape ID: 196, Type: Foreign, Master = null
Shape ID: 198, Type: Foreign, Master = null
Shape ID: 1137, Type: Shape, Master = 6, Text: Set Skill = Overnight Skill
Shape ID: 1141, Type: Shape, Master = 8, Text: Scount = 0
Shape ID: 1142, Type: Shape, Master = 6, Text: Set Skill = Secondary Skill
Shape ID: 1145, Type: Shape, Master = 6, Text: Set Skill = Primary Skill
Shape ID: 199, Type: Foreign, Master = null
Shape ID: 1151, Type: Shape, Master = 9, Text: EWT Data Table
Shape ID: 1152, Type: Shape, Master = 6, Text: Set Data: Survey Code
Shape ID: 1155, Type: Shape, Master = 4, Text: End
Shape ID: 1158, Type: Shape, Master = 4, Text: End
Page 8 has 114 vertices and 143 edges

Graph notation of page 8:
Vertices:
Vertex: 1056, InDegree: 0, OutDegree: 2, Text: Ocount > 0
Vertex: 102, InDegree: 1, OutDegree: 0, Text: 
Vertex: 1076, InDegree: 1, OutDegree: 2, Text: Transfer Code Operational Routing
Vertex: 74, InDegree: 1, OutDegree: 2, Text: Play Prompt: QM Message
Vertex: 1119, InDegree: 1, OutDegree: 2, Text: Survey Enabled = Y
Vertex: 4, InDegree: 1, OutDegree: 1, Text: Update Data: scheduleState =_Closed
Vertex: 105, InDegree: 1, OutDegree: 2, Text: QM_Heard = Y
Vertex: 1091, InDegree: 1, OutDegree: 1, Text: Transfer: Voicemail Queue
Vertex: 118, InDegree: 1, OutDegree: 1, Text: Update Data: R*Range = Range 1[0]
Vertex: 1077, InDegree: 1, OutDegree: 1, Text: Update Data: TC Variables
Vertex: 1110, InDegree: 1, OutDegree: 1, Text: Update Data: scheduleState =_noAgents
Vertex: 1145, InDegree: 1, OutDegree: 1, Text: Set Skill = Primary Skill
Vertex: 1048, InDegree: 4, OutDegree: 2, Text: Queue Groups
Vertex: 1137, InDegree: 1, OutDegree: 1, Text: Set Skill = Overnight Skill
Vertex: 39, InDegree: 1, OutDegree: 1, Text: Play Prompt: Message Prompt
Vertex: 80, InDegree: 1, OutDegree: 1, Text: Set Data: QM_Heard = Y
Vertex: 18, InDegree: 1, OutDegree: 1, Text: Update Data: scheduleState=_Emergency
Vertex: 1158, InDegree: 1, OutDegree: 0, Text: End
Vertex: 166, InDegree: 1, OutDegree: 2, Text: Callback Threshold
Vertex: 130, InDegree: 1, OutDegree: 1, Text: If( EWT >= R1Lower AND EWT < R1Higher)
Vertex: 31, InDegree: 3, OutDegree: 2, Text: Transfer Flag Enabled
Vertex: 139, InDegree: 1, OutDegree: 1, Text: If( EWT >= R*Lower AND EWT < R*Higher)
Vertex: 68, InDegree: 1, OutDegree: 2, Text: IVR_Name = Nuance
Vertex: 1088, InDegree: 2, OutDegree: 0, Text: Disconnect
Vertex: 27, InDegree: 1, OutDegree: 3, Text: Any TC Variables == Empty
Vertex: 53, InDegree: 1, OutDegree: 1, Text: Get Data: Force QM Flag
Vertex: 1053, InDegree: 1, OutDegree: 1, Text: Overnight Schedule
Vertex: 79, InDegree: 1, OutDegree: 1, Text: Set Data: QM_Heard = Y
Vertex: 163, InDegree: 1, OutDegree: 2, Text: Callback Schedule
Vertex: 1087, InDegree: 2, OutDegree: 1, Text: Play Prompt: Error Prompt
Vertex: 22, InDegree: 1, OutDegree: 1, Text: Update Data: TC Variables
Vertex: 21, InDegree: 1, OutDegree: 2, Text: Transfer Code Operational Routing
Vertex: 134, InDegree: 1, OutDegree: 1, Text: If( EWT >= R2Lower AND EWT < R2Higher)
Vertex: 135, InDegree: 1, OutDegree: 1, Text: Play Prompt: R2Prompt
Vertex: 116, InDegree: 1, OutDegree: 1, Text: Split EWT Range * by :
Vertex: 137, InDegree: 1, OutDegree: 1, Text: Play Prompt: R3Prompt
Vertex: 152, InDegree: 1, OutDegree: 0, Text: 
Vertex: 1125, InDegree: 1, OutDegree: 2, Text: Caller_Type = Enrollee
Vertex: 1152, InDegree: 1, OutDegree: 1, Text: Set Data: Survey Code
Vertex: 157, InDegree: 2, OutDegree: 2, Text: Callback Flag
Vertex: 35, InDegree: 2, OutDegree: 0, Text: Disconnect
Vertex: 1085, InDegree: 1, OutDegree: 1, Text: Play Prompt: Transfer Prompt
Vertex: 1120, InDegree: 1, OutDegree: 1, Text: Play Prompt: Survey Prompt
Vertex: 58, InDegree: 1, OutDegree: 1, Text: Get Data: Priority
Vertex: 174, InDegree: 1, OutDegree: 1, Text: Set Delay: ToString(ToInt(Task.intSeconds/60))
Vertex: 1006, InDegree: 1, OutDegree: 1, Text: Agent Status Check
Vertex: 56, InDegree: 1, OutDegree: 1, Text: Get Data:  Survey Prompt
Vertex: 101, InDegree: 1, OutDegree: 0, Text: 
Vertex: 66, InDegree: 1, OutDegree: 1, Text: Get Data: Queue
Vertex: 20, InDegree: 1, OutDegree: 1, Text: Update Data: BU Variables
Vertex: 136, InDegree: 1, OutDegree: 1, Text: If( EWT >= R3Lower AND EWT < R3Higher)
Vertex: 171, InDegree: 1, OutDegree: 2, Text: Calculate Delay
Vertex: 99, InDegree: 3, OutDegree: 1, Text: Set Priority
Vertex: 1, InDegree: 0, OutDegree: 1, Text: Start
Vertex: 72, InDegree: 1, OutDegree: 2, Text: Force QM Flag = Y
Vertex: 194, InDegree: 1, OutDegree: 0, Text: 
Vertex: 1081, InDegree: 1, OutDegree: 1, Text: Update Date: Empty Values = BU Variables
Vertex: 1141, InDegree: 2, OutDegree: 2, Text: Scount = 0
Vertex: 6, InDegree: 1, OutDegree: 1, Text: Update Data: scheduleState=_Holiday
Vertex: 117, InDegree: 1, OutDegree: 1, Text: Split R*Range by ,
Vertex: 138, InDegree: 1, OutDegree: 5, Text: Switch – Take first that is true
Vertex: 52, InDegree: 1, OutDegree: 1, Text: Update Data:
opCheck = BU_CallerType_CallType_Language + scheduleState
Vertex: 133, InDegree: 1, OutDegree: 1, Text: Play Prompt: R4Prompt
Vertex: 155, InDegree: 5, OutDegree: 1, Text: Set Data: FirstEWT = EWT
Vertex: 34, InDegree: 2, OutDegree: 1, Text: Play Prompt: Error Prompt
Vertex: 170, InDegree: 1, OutDegree: 0, Text: 
Vertex: 5, InDegree: 1, OutDegree: 1, Text: Update Data: scheduleState=_Emergency
Vertex: 81, InDegree: 1, OutDegree: 1, Text: Set Data: QM_Heard = N
Vertex: 2, InDegree: 1, OutDegree: 4, Text: Evaluate Schedule
Vertex: 82, InDegree: 1, OutDegree: 1, Text: Set Data: QM_Heard = N
Vertex: 1128, InDegree: 1, OutDegree: 1, Text: FCR Action
Vertex: 1075, InDegree: 1, OutDegree: 1, Text: Update Data: BU Variables
Vertex: 73, InDegree: 1, OutDegree: 2, Text: Play Prompt: QM Message
Vertex: 3, InDegree: 1, OutDegree: 1, Text: Update Data: scheduleState = _Open
Vertex: 196, InDegree: 1, OutDegree: 0, Text: 
Vertex: 19, InDegree: 2, OutDegree: 1, Text: Update Data:
opCheck = BU_CallerType_CallType_Language + scheduleState
Vertex: 132, InDegree: 1, OutDegree: 1, Text: If( EWT >= R4Lower AND EWT < R4Higher)
Vertex: 169, InDegree: 1, OutDegree: 1, Text: Transfer: Trigger Proactive Callback
Vertex: 131, InDegree: 1, OutDegree: 1, Text: Play Prompt: R1Prompt
Vertex: 121, InDegree: 1, OutDegree: 1, Text: Update Data: R*Upper = R*Range[1]
Vertex: 32, InDegree: 1, OutDegree: 1, Text: Play Prompt: Transfer Prompt
Vertex: 195, InDegree: 1, OutDegree: 0, Text: 
Vertex: 1155, InDegree: 1, OutDegree: 0, Text: End
Vertex: 160, InDegree: 1, OutDegree: 2, Text: If(R*Prompt = N)
Vertex: 1151, InDegree: 4, OutDegree: 1, Text: EWT Data Table
Vertex: 1084, InDegree: 3, OutDegree: 2, Text: Transfer Flag Enabled
Vertex: 188, InDegree: 1, OutDegree: 2, Text: Callback Offer
Vertex: 96, InDegree: 1, OutDegree: 2, Text: BU_CallerType_CallType_Language Operational Routing
Vertex: 1106, InDegree: 1, OutDegree: 2, Text: BU_CallerType_CallType_Language Operational Routing
Vertex: 1092, InDegree: 1, OutDegree: 1, Text: Play Prompt: Message Prompt
Vertex: 36, InDegree: 1, OutDegree: 2, Text: Voicemail Flag Enabled
Vertex: 140, InDegree: 1, OutDegree: 1, Text: Play Prompt: R*Prompt
Vertex: 1142, InDegree: 1, OutDegree: 1, Text: Set Skill = Secondary Skill
Vertex: 38, InDegree: 1, OutDegree: 1, Text: Transfer: Voicemail Queue
Vertex: 12, InDegree: 3, OutDegree: 2, Text: Emergency Flag = Yes
Vertex: 1086, InDegree: 1, OutDegree: 1, Text: Transfer: Transfer Number
Vertex: 114, InDegree: 1, OutDegree: 2, Text: EWT Data Table
Vertex: 1124, InDegree: 6, OutDegree: 2, Text: FCR Enabled
Vertex: 59, InDegree: 1, OutDegree: 1, Text: Get Data: KVPs
Vertex: 70, InDegree: 1, OutDegree: 1, Text: Get Data: QM Message
Vertex: 120, InDegree: 1, OutDegree: 1, Text: Update Data: R*Lower = R*Range[0]
Vertex: 187, InDegree: 2, OutDegree: 1, Text: Transfer: Queue
Vertex: 37, InDegree: 1, OutDegree: 1, Text: Play Prompt: Voicemail Prompt
Vertex: 109, InDegree: 1, OutDegree: 1, Text: GetEWT(Queue)
Vertex: 119, InDegree: 1, OutDegree: 1, Text: Update Data: R*Prompt = Range 1[1]
Vertex: 1089, InDegree: 1, OutDegree: 2, Text: Voicemail Flag Enabled
Vertex: 1090, InDegree: 1, OutDegree: 1, Text: Play Prompt: Voicemail Prompt
Vertex: 1007, InDegree: 1, OutDegree: 2, Text: Pcount = 0
Vertex: 28, InDegree: 1, OutDegree: 1, Text: Update Date: Empty Values = BU Variables
Vertex: 57, InDegree: 1, OutDegree: 1, Text: Get Data:  Survey Code
Vertex: 54, InDegree: 1, OutDegree: 1, Text: Get Data: Survey Enabled
Vertex: 1080, InDegree: 1, OutDegree: 3, Text: Any TC Variables == Empty
Vertex: 33, InDegree: 1, OutDegree: 1, Text: Transfer: Transfer Number
Vertex: 1132, InDegree: 1, OutDegree: 2, Text: Enrollee_Person_ID is not empty

Edges:
Edge: 7 connects vertex 1 to vertex 2
Edge: 10 connects vertex 2 to vertex 6
Edge: 9 connects vertex 2 to vertex 4
Edge: 8 connects vertex 2 to vertex 3
Edge: 11 connects vertex 2 to vertex 5
Edge: 13 connects vertex 3 to vertex 52
Edge: 14 connects vertex 4 to vertex 12
Edge: 16 connects vertex 5 to vertex 12
Edge: 15 connects vertex 6 to vertex 12
Edge: 17 connects vertex 12 to vertex 18
Edge: 23 connects vertex 12 to vertex 19
Edge: 26 connects vertex 18 to vertex 19
Edge: 97 connects vertex 19 to vertex 96
Edge: 24 connects vertex 20 to vertex 21
Edge: 104 connects vertex 21 to vertex 102
Edge: 25 connects vertex 21 to vertex 22
Edge: 29 connects vertex 22 to vertex 27
Edge: 55 connects vertex 27 to vertex 31
Edge: 40 connects vertex 27 to vertex 31
Edge: 30 connects vertex 27 to vertex 28
Edge: 41 connects vertex 28 to vertex 31
Edge: 42 connects vertex 31 to vertex 32
Edge: 43 connects vertex 31 to vertex 36
Edge: 44 connects vertex 32 to vertex 33
Edge: 45 connects vertex 33 to vertex 34
Edge: 47 connects vertex 34 to vertex 35
Edge: 48 connects vertex 36 to vertex 37
Edge: 50 connects vertex 36 to vertex 39
Edge: 49 connects vertex 37 to vertex 38
Edge: 46 connects vertex 38 to vertex 34
Edge: 51 connects vertex 39 to vertex 35
Edge: 60 connects vertex 52 to vertex 53
Edge: 61 connects vertex 53 to vertex 70
Edge: 62 connects vertex 54 to vertex 56
Edge: 63 connects vertex 56 to vertex 57
Edge: 64 connects vertex 57 to vertex 58
Edge: 65 connects vertex 58 to vertex 59
Edge: 67 connects vertex 59 to vertex 66
Edge: 69 connects vertex 66 to vertex 68
Edge: 76 connects vertex 68 to vertex 72
Edge: 75 connects vertex 68 to vertex 105
Edge: 71 connects vertex 70 to vertex 54
Edge: 89 connects vertex 72 to vertex 1124
Edge: 77 connects vertex 72 to vertex 73
Edge: 84 connects vertex 73 to vertex 81
Edge: 83 connects vertex 73 to vertex 80
Edge: 85 connects vertex 74 to vertex 82
Edge: 78 connects vertex 74 to vertex 79
Edge: 87 connects vertex 79 to vertex 1124
Edge: 90 connects vertex 80 to vertex 1124
Edge: 88 connects vertex 81 to vertex 1124
Edge: 86 connects vertex 82 to vertex 1124
Edge: 103 connects vertex 96 to vertex 101
Edge: 98 connects vertex 96 to vertex 20
Edge: 100 connects vertex 99 to vertex 109
Edge: 107 connects vertex 105 to vertex 1124
Edge: 106 connects vertex 105 to vertex 74
Edge: 110 connects vertex 109 to vertex 114
Edge: 1118 connects vertex 114 to vertex 152
Edge: 122 connects vertex 114 to vertex 116
Edge: 123 connects vertex 116 to vertex 118
Edge: 126 connects vertex 117 to vertex 120
Edge: 124 connects vertex 118 to vertex 119
Edge: 125 connects vertex 119 to vertex 117
Edge: 127 connects vertex 120 to vertex 121
Edge: 128 connects vertex 121 to vertex 160
Edge: 146 connects vertex 130 to vertex 131
Edge: 113 connects vertex 131 to vertex 155
Edge: 149 connects vertex 132 to vertex 133
Edge: 153 connects vertex 133 to vertex 155
Edge: 147 connects vertex 134 to vertex 135
Edge: 112 connects vertex 135 to vertex 155
Edge: 148 connects vertex 136 to vertex 137
Edge: 111 connects vertex 137 to vertex 155
Edge: 145 connects vertex 138 to vertex 139
Edge: 144 connects vertex 138 to vertex 132
Edge: 143 connects vertex 138 to vertex 136
Edge: 142 connects vertex 138 to vertex 134
Edge: 141 connects vertex 138 to vertex 130
Edge: 150 connects vertex 139 to vertex 140
Edge: 154 connects vertex 140 to vertex 155
Edge: 156 connects vertex 155 to vertex 157
Edge: 159 connects vertex 157 to vertex 163
Edge: 158 connects vertex 157 to vertex 1151
Edge: 162 connects vertex 160 to vertex 157
Edge: 161 connects vertex 160 to vertex 138
Edge: 164 connects vertex 163 to vertex 166
Edge: 165 connects vertex 163 to vertex 1151
Edge: 190 connects vertex 166 to vertex 1151
Edge: 168 connects vertex 166 to vertex 188
Edge: 1157 connects vertex 169 to vertex 1158
Edge: 172 connects vertex 171 to vertex 174
Edge: 173 connects vertex 171 to vertex 170
Edge: 175 connects vertex 174 to vertex 169
Edge: 1156 connects vertex 187 to vertex 1155
Edge: 189 connects vertex 188 to vertex 171
Edge: 167 connects vertex 188 to vertex 1151
Edge: 1017 connects vertex 1006 to vertex 1053
Edge: 1146 connects vertex 1007 to vertex 1145
Edge: 1144 connects vertex 1007 to vertex 1141
Edge: 1136 connects vertex 1048 to vertex 196
Edge: 1051 connects vertex 1048 to vertex 1006
Edge: 1054 connects vertex 1053 to vertex 1007
Edge: 1138 connects vertex 1056 to vertex 1137
Edge: 1060 connects vertex 1056 to vertex 1141
Edge: 1115 connects vertex 1075 to vertex 1106
Edge: 1114 connects vertex 1076 to vertex 1075
Edge: 1109 connects vertex 1076 to vertex 195
Edge: 1082 connects vertex 1077 to vertex 1080
Edge: 1105 connects vertex 1080 to vertex 1084
Edge: 1093 connects vertex 1080 to vertex 1084
Edge: 1083 connects vertex 1080 to vertex 1081
Edge: 1094 connects vertex 1081 to vertex 1084
Edge: 1096 connects vertex 1084 to vertex 1089
Edge: 1095 connects vertex 1084 to vertex 1085
Edge: 1097 connects vertex 1085 to vertex 1086
Edge: 1098 connects vertex 1086 to vertex 1087
Edge: 1100 connects vertex 1087 to vertex 1088
Edge: 1103 connects vertex 1089 to vertex 1092
Edge: 1101 connects vertex 1089 to vertex 1090
Edge: 1102 connects vertex 1090 to vertex 1091
Edge: 1099 connects vertex 1091 to vertex 1087
Edge: 1104 connects vertex 1092 to vertex 1088
Edge: 1116 connects vertex 1106 to vertex 1077
Edge: 1108 connects vertex 1106 to vertex 194
Edge: 1111 connects vertex 1110 to vertex 1076
Edge: 1122 connects vertex 1119 to vertex 187
Edge: 1121 connects vertex 1119 to vertex 1120
Edge: 1123 connects vertex 1120 to vertex 1152
Edge: 1129 connects vertex 1124 to vertex 1048
Edge: 1126 connects vertex 1124 to vertex 1125
Edge: 1130 connects vertex 1125 to vertex 1048
Edge: 1127 connects vertex 1125 to vertex 1132
Edge: 1131 connects vertex 1128 to vertex 1048
Edge: 1134 connects vertex 1132 to vertex 1048
Edge: 1133 connects vertex 1132 to vertex 1128
Edge: 1148 connects vertex 1137 to vertex 99
Edge: 1147 connects vertex 1141 to vertex 1110
Edge: 1143 connects vertex 1141 to vertex 1142
Edge: 1150 connects vertex 1142 to vertex 99
Edge: 1149 connects vertex 1145 to vertex 99
Edge: 1154 connects vertex 1151 to vertex 1119
Edge: 1153 connects vertex 1152 to vertex 187

Number of paths to test: 2772

Page 9:
Shape ID: 1000, Type: Shape, Master = 9, Text: Queue
Cache Table
Shape ID: 1001, Type: Shape, Master = 4, Text: Start
Shape ID: 1002, Type: Shape, Master = 6, Text: Convert Update interval to Duration
Shape ID: 1003, Type: Shape, Master = 6, Text: Update Data: LookupResult = insert
Shape ID: 1007, Type: Shape, Master = 6, Text: Set Data: Time Difference
Shape ID: 1008, Type: Shape, Master = 6, Text: Set Data: Update Interval as Duration
Shape ID: 1009, Type: Shape, Master = 6, Text: Set Data: Needs Update T/F
Shape ID: 1010, Type: Shape, Master = 8, Text: Needs Update?
Shape ID: 1011, Type: Shape, Master = 6, Text: Update Data: LookupResult = update
Shape ID: 1012, Type: Shape, Master = 6, Text: Update Data: LookupResult = existing
Shape ID: 1019, Type: Shape, Master = 6, Text: Set Data: LookupResult
Shape ID: 1024, Type: Shape, Master = 8, Text: LookupResult = update or insert
Shape ID: 1025, Type: Shape, Master = 7, Text: Agent Status API
Shape ID: 1028, Type: Shape, Master = 6, Text: Set Data: Agent Status Action = Timeout
Shape ID: 1029, Type: Shape, Master = 6, Text: Set Data: Agent Status Action = Failure
Shape ID: 1033, Type: Shape, Master = 6, Text: Update Data: * = 0
Shape ID: 1034, Type: Shape, Master = null, Text: PS 1 Count
PS 2 Count
PS 3 Count
PS 4 Count
PS 5 Count
Overnight Count
Shape ID: 1036, Type: Shape, Master = 4, Text: Agent Skill Loop Start
Shape ID: 1037, Type: Shape, Master = 6, Text: Max Agent Skill Loop Count = All Member Skills Count
Shape ID: 1038, Type: Shape, Master = 6, Text: SkillListEntry = Split(Task.AllMemberSkills[Task.index], ",")
Shape ID: 2, Type: Foreign, Master = null
Shape ID: 1040, Type: Shape, Master = 6, Text: Create collection of all PS skills
Shape ID: 1041, Type: Shape, Master = 4, Text: Required Skill Loop
Shape ID: 1042, Type: Shape, Master = 6, Text: Max Loop Count = 6
Shape ID: 1043, Type: Shape, Master = 8, Text: Loop Count
Shape ID: 1044, Type: Shape, Master = 6, Text: Update Data: SkillLevel = PS 1
Shape ID: 1045, Type: Shape, Master = 6, Text: Update Data: SkillLevel = PS 2
Shape ID: 1046, Type: Shape, Master = 6, Text: Update Data: SkillLevel = PS 3
Shape ID: 1047, Type: Shape, Master = 6, Text: Update Data: SkillLevel = PS 4
Shape ID: 1048, Type: Shape, Master = 6, Text: Update Data: SkillLevel = PS 5
Shape ID: 1061, Type: Shape, Master = 6, Text: InputSkillCollection = Split Skills at each index (Loop Count)
Shape ID: 3, Type: Foreign, Master = null
Shape ID: 1068, Type: Shape, Master = 6, Text: Update Data: MaxIndex = Count of InputSkillCollection
Shape ID: 1069, Type: Shape, Master = 6, Text: Update Data: * = 0
Shape ID: 1070, Type: Shape, Master = null, Text: TotalCount
IdleCount
Matches
Shape ID: 1074, Type: Shape, Master = 6, Text: Set Data: SkillLevel + “Input” = InputSkillCollection
Shape ID: 1075, Type: Shape, Master = 6, Text: Set Data: SkillLevel + “Max Index” = Max Index
Shape ID: 1076, Type: Shape, Master = 8, Text: IsNotSetOrEmpty: InputSkillCollection
Shape ID: 1077, Type: Shape, Master = 6, Text: Set Data: SkillLevel + “Input” = Empty
Shape ID: 1082, Type: Shape, Master = 4, Text: Loop through Skill Collection
Shape ID: 1083, Type: Shape, Master = 6, Text: Max Loop Count = MaxIndex
Shape ID: 1084, Type: Shape, Master = 8, Text: FindFirst(SkillListEntry, InputSkillCollection[Loop Count])
Shape ID: 1085, Type: Shape, Master = 6, Text: Update Data: Matches = Matches +1
Shape ID: 1090, Type: Shape, Master = 8, Text: Loop Count = Max Loop Count
Shape ID: 1094, Type: Shape, Master = 8, Text: MaxIndex = Matches
Shape ID: 1096, Type: Shape, Master = 8, Text: EntryStatus == IDLE
Shape ID: 1097, Type: Shape, Master = 6, Text: EntryStatus = AllMemberStatuses[Loop Count]
Shape ID: 1099, Type: Shape, Master = 6, Text: SkillLevel + “Match” = Not Found
Shape ID: 1100, Type: Shape, Master = 6, Text: IdleCount = IdleCount +1
Shape ID: 1101, Type: Shape, Master = 6, Text: TotalCount = TotalCount + 1
Shape ID: 1102, Type: Shape, Master = 6, Text: TotalCount = TotalCount + 1
Shape ID: 1111, Type: Shape, Master = 8, Text: SkillLevel
Shape ID: 1112, Type: Shape, Master = 6, Text: Update Data: PS 1 Count = PS 1 Count + TotalCount
Shape ID: 1113, Type: Shape, Master = 6, Text: Update Data: PS 2 Count = PS 2 Count + TotalCount
Shape ID: 1114, Type: Shape, Master = 6, Text: Update Data: PS 3 Count = PS 3 Count + TotalCount
Shape ID: 1115, Type: Shape, Master = 6, Text: Update Data: PS 4 Count = PS 4 Count + TotalCount
Shape ID: 1116, Type: Shape, Master = 6, Text: Update Data: PS 5 Count = PS 5 Count + TotalCount
Shape ID: 1122, Type: Shape, Master = 8, Text: Required Skill Loop = 6
Shape ID: 1125, Type: Shape, Master = 8, Text: Agent Skill Loop = Max Agent Skill Loop Count
Shape ID: 1132, Type: Shape, Master = 6, Text: Set Data: Common Module Loop Status = Finished
Shape ID: 1133, Type: Shape, Master = 8, Text: LookupResult == insert
Shape ID: 1134, Type: Shape, Master = 6, Text: Set Data: Insert Action = Pre-Call
Shape ID: 1135, Type: Shape, Master = 6, Text: Set Data: Insert Action = Pre-Call
Shape ID: 1136, Type: Shape, Master = 7, Text: Update Data Table API
Shape ID: 1137, Type: Shape, Master = 6, Text: Set Data: Insert Action = Success
Shape ID: 1138, Type: Shape, Master = 6, Text: Set Data: Insert Action = Failure
Shape ID: 1139, Type: Shape, Master = 6, Text: Set Data: Insert Action = Timeout
Shape ID: 1148, Type: Shape, Master = 7, Text: Insert Row Data Table API
Shape ID: 1149, Type: Shape, Master = 6, Text: Set Data: Insert Action = Success
Shape ID: 1150, Type: Shape, Master = 6, Text: Set Data: Insert Action = Failure
Shape ID: 1151, Type: Shape, Master = 6, Text: Set Data: Insert Action = Timeout
Shape ID: 1156, Type: Shape, Master = 6, Text: Set Data: *
Shape ID: 1157, Type: Shape, Master = 6, Text: Output Data:
Shape ID: 1165, Type: Shape, Master = 4, Text: End
Shape ID: 1167, Type: Shape, Master = null, Text: Delta Dental
Agent Status Check Call Flow
Shape ID: 4, Type: Foreign, Master = null
Shape ID: 5, Type: Foreign, Master = null
Shape ID: 1168, Type: Shape, Master = 6, Text: Update Data: SkillLevel = Overnight
Shape ID: 1170, Type: Shape, Master = 6, Text: Update Data: Overnight Count = Overnight + TotalCount
Shape ID: 6, Type: Foreign, Master = null
Shape ID: 7, Type: Foreign, Master = null
Page 9 has 76 vertices and 99 edges

Graph notation of page 9:
Vertices:
Vertex: 1090, InDegree: 2, OutDegree: 2, Text: Loop Count = Max Loop Count
Vertex: 1068, InDegree: 1, OutDegree: 1, Text: Update Data: MaxIndex = Count of InputSkillCollection
Vertex: 1009, InDegree: 1, OutDegree: 1, Text: Set Data: Needs Update T/F
Vertex: 1094, InDegree: 1, OutDegree: 2, Text: MaxIndex = Matches
Vertex: 1125, InDegree: 1, OutDegree: 2, Text: Agent Skill Loop = Max Agent Skill Loop Count
Vertex: 1044, InDegree: 1, OutDegree: 1, Text: Update Data: SkillLevel = PS 1
Vertex: 1135, InDegree: 1, OutDegree: 1, Text: Set Data: Insert Action = Pre-Call
Vertex: 1038, InDegree: 1, OutDegree: 1, Text: SkillListEntry = Split(Task.AllMemberSkills[Task.index], ",")
Vertex: 1037, InDegree: 1, OutDegree: 1, Text: Max Agent Skill Loop Count = All Member Skills Count
Vertex: 1138, InDegree: 1, OutDegree: 1, Text: Set Data: Insert Action = Failure
Vertex: 1101, InDegree: 1, OutDegree: 1, Text: TotalCount = TotalCount + 1
Vertex: 1074, InDegree: 1, OutDegree: 1, Text: Set Data: SkillLevel + “Input” = InputSkillCollection
Vertex: 1077, InDegree: 1, OutDegree: 0, Text: Set Data: SkillLevel + “Input” = Empty
Vertex: 1003, InDegree: 1, OutDegree: 1, Text: Update Data: LookupResult = insert
Vertex: 1097, InDegree: 1, OutDegree: 1, Text: EntryStatus = AllMemberStatuses[Loop Count]
Vertex: 1025, InDegree: 1, OutDegree: 4, Text: Agent Status API
Vertex: 1139, InDegree: 1, OutDegree: 1, Text: Set Data: Insert Action = Timeout
Vertex: 1085, InDegree: 1, OutDegree: 1, Text: Update Data: Matches = Matches +1
Vertex: 1122, InDegree: 6, OutDegree: 2, Text: Required Skill Loop = 6
Vertex: 1036, InDegree: 2, OutDegree: 1, Text: Agent Skill Loop Start
Vertex: 1070, InDegree: 1, OutDegree: 0, Text: TotalCount
IdleCount
Matches
Vertex: 1084, InDegree: 1, OutDegree: 2, Text: FindFirst(SkillListEntry, InputSkillCollection[Loop Count])
Vertex: 1061, InDegree: 6, OutDegree: 2, Text: InputSkillCollection = Split Skills at each index (Loop Count)
Vertex: 1033, InDegree: 1, OutDegree: 2, Text: Update Data: * = 0
Vertex: 1168, InDegree: 1, OutDegree: 1, Text: Update Data: SkillLevel = Overnight
Vertex: 1102, InDegree: 1, OutDegree: 1, Text: TotalCount = TotalCount + 1
Vertex: 1076, InDegree: 1, OutDegree: 2, Text: IsNotSetOrEmpty: InputSkillCollection
Vertex: 1024, InDegree: 1, OutDegree: 1, Text: LookupResult = update or insert
Vertex: 1116, InDegree: 1, OutDegree: 1, Text: Update Data: PS 5 Count = PS 5 Count + TotalCount
Vertex: 1069, InDegree: 1, OutDegree: 2, Text: Update Data: * = 0
Vertex: 1083, InDegree: 1, OutDegree: 1, Text: Max Loop Count = MaxIndex
Vertex: 1029, InDegree: 1, OutDegree: 0, Text: Set Data: Agent Status Action = Failure
Vertex: 1075, InDegree: 1, OutDegree: 1, Text: Set Data: SkillLevel + “Max Index” = Max Index
Vertex: 1082, InDegree: 2, OutDegree: 1, Text: Loop through Skill Collection
Vertex: 1133, InDegree: 1, OutDegree: 2, Text: LookupResult == insert
Vertex: 1042, InDegree: 1, OutDegree: 1, Text: Max Loop Count = 6
Vertex: 1001, InDegree: 0, OutDegree: 1, Text: Start
Vertex: 1046, InDegree: 1, OutDegree: 1, Text: Update Data: SkillLevel = PS 3
Vertex: 1008, InDegree: 1, OutDegree: 1, Text: Set Data: Update Interval as Duration
Vertex: 1007, InDegree: 1, OutDegree: 1, Text: Set Data: Time Difference
Vertex: 1149, InDegree: 1, OutDegree: 1, Text: Set Data: Insert Action = Success
Vertex: 1099, InDegree: 1, OutDegree: 1, Text: SkillLevel + “Match” = Not Found
Vertex: 1150, InDegree: 1, OutDegree: 1, Text: Set Data: Insert Action = Failure
Vertex: 1010, InDegree: 1, OutDegree: 2, Text: Needs Update?
Vertex: 1134, InDegree: 1, OutDegree: 1, Text: Set Data: Insert Action = Pre-Call
Vertex: 1100, InDegree: 1, OutDegree: 1, Text: IdleCount = IdleCount +1
Vertex: 1165, InDegree: 1, OutDegree: 0, Text: End
Vertex: 1028, InDegree: 1, OutDegree: 0, Text: Set Data: Agent Status Action = Timeout
Vertex: 1000, InDegree: 1, OutDegree: 3, Text: Queue
Cache Table
Vertex: 1096, InDegree: 1, OutDegree: 2, Text: EntryStatus == IDLE
Vertex: 1048, InDegree: 1, OutDegree: 1, Text: Update Data: SkillLevel = PS 5
Vertex: 1148, InDegree: 1, OutDegree: 3, Text: Insert Row Data Table API
Vertex: 1157, InDegree: 1, OutDegree: 1, Text: Output Data:
Vertex: 1156, InDegree: 6, OutDegree: 1, Text: Set Data: *
Vertex: 1151, InDegree: 1, OutDegree: 1, Text: Set Data: Insert Action = Timeout
Vertex: 1011, InDegree: 1, OutDegree: 1, Text: Update Data: LookupResult = update
Vertex: 1113, InDegree: 1, OutDegree: 1, Text: Update Data: PS 2 Count = PS 2 Count + TotalCount
Vertex: 3, InDegree: 1, OutDegree: 0, Text: 
Vertex: 1137, InDegree: 1, OutDegree: 1, Text: Set Data: Insert Action = Success
Vertex: 1034, InDegree: 1, OutDegree: 0, Text: PS 1 Count
PS 2 Count
PS 3 Count
PS 4 Count
PS 5 Count
Overnight Count
Vertex: 1170, InDegree: 1, OutDegree: 1, Text: Update Data: Overnight Count = Overnight + TotalCount
Vertex: 1040, InDegree: 1, OutDegree: 1, Text: Create collection of all PS skills
Vertex: 1111, InDegree: 3, OutDegree: 6, Text: SkillLevel
Vertex: 1043, InDegree: 1, OutDegree: 6, Text: Loop Count
Vertex: 1002, InDegree: 1, OutDegree: 1, Text: Convert Update interval to Duration
Vertex: 1019, InDegree: 4, OutDegree: 1, Text: Set Data: LookupResult
Vertex: 1115, InDegree: 1, OutDegree: 1, Text: Update Data: PS 4 Count = PS 4 Count + TotalCount
Vertex: 1132, InDegree: 1, OutDegree: 1, Text: Set Data: Common Module Loop Status = Finished
Vertex: 1041, InDegree: 2, OutDegree: 1, Text: Required Skill Loop
Vertex: 1045, InDegree: 1, OutDegree: 1, Text: Update Data: SkillLevel = PS 2
Vertex: 1047, InDegree: 1, OutDegree: 1, Text: Update Data: SkillLevel = PS 4
Vertex: 1112, InDegree: 1, OutDegree: 1, Text: Update Data: PS 1 Count = PS 1 Count + TotalCount
Vertex: 1136, InDegree: 1, OutDegree: 3, Text: Update Data Table API
Vertex: 2, InDegree: 1, OutDegree: 0, Text: 
Vertex: 1012, InDegree: 1, OutDegree: 1, Text: Update Data: LookupResult = existing
Vertex: 1114, InDegree: 1, OutDegree: 1, Text: Update Data: PS 3 Count = PS 3 Count + TotalCount

Edges:
Edge: 1006 connects vertex 1000 to vertex 1003
Edge: 1005 connects vertex 1000 to vertex 1002
Edge: 1020 connects vertex 1000 to vertex 1019
Edge: 1004 connects vertex 1001 to vertex 1000
Edge: 1013 connects vertex 1002 to vertex 1007
Edge: 1023 connects vertex 1003 to vertex 1019
Edge: 1014 connects vertex 1007 to vertex 1008
Edge: 1015 connects vertex 1008 to vertex 1009
Edge: 1016 connects vertex 1009 to vertex 1010
Edge: 1017 connects vertex 1010 to vertex 1012
Edge: 1018 connects vertex 1010 to vertex 1011
Edge: 1021 connects vertex 1011 to vertex 1019
Edge: 1022 connects vertex 1012 to vertex 1019
Edge: 1026 connects vertex 1019 to vertex 1024
Edge: 1027 connects vertex 1024 to vertex 1025
Edge: 1030 connects vertex 1025 to vertex 1028
Edge: 1031 connects vertex 1025 to vertex 1029
Edge: 1032 connects vertex 1025 to vertex 1033
Edge: 1039 connects vertex 1025 to vertex 2
Edge: 1035 connects vertex 1033 to vertex 1034
Edge: 1049 connects vertex 1033 to vertex 1036
Edge: 1050 connects vertex 1036 to vertex 1037
Edge: 1051 connects vertex 1037 to vertex 1038
Edge: 1098 connects vertex 1038 to vertex 1097
Edge: 1053 connects vertex 1040 to vertex 1041
Edge: 1054 connects vertex 1041 to vertex 1042
Edge: 1055 connects vertex 1042 to vertex 1043
Edge: 1169 connects vertex 1043 to vertex 1168
Edge: 1056 connects vertex 1043 to vertex 1044
Edge: 1057 connects vertex 1043 to vertex 1045
Edge: 1058 connects vertex 1043 to vertex 1046
Edge: 1059 connects vertex 1043 to vertex 1047
Edge: 1060 connects vertex 1043 to vertex 1048
Edge: 1067 connects vertex 1044 to vertex 1061
Edge: 1066 connects vertex 1045 to vertex 1061
Edge: 1063 connects vertex 1046 to vertex 1061
Edge: 1064 connects vertex 1047 to vertex 1061
Edge: 1065 connects vertex 1048 to vertex 1061
Edge: 1072 connects vertex 1061 to vertex 1068
Edge: 1062 connects vertex 1061 to vertex 3
Edge: 1073 connects vertex 1068 to vertex 1069
Edge: 1078 connects vertex 1069 to vertex 1074
Edge: 1071 connects vertex 1069 to vertex 1070
Edge: 1079 connects vertex 1074 to vertex 1075
Edge: 1080 connects vertex 1075 to vertex 1076
Edge: 1087 connects vertex 1076 to vertex 1082
Edge: 1081 connects vertex 1076 to vertex 1077
Edge: 1088 connects vertex 1082 to vertex 1083
Edge: 1089 connects vertex 1083 to vertex 1084
Edge: 1091 connects vertex 1084 to vertex 1090
Edge: 1086 connects vertex 1084 to vertex 1085
Edge: 1093 connects vertex 1085 to vertex 1090
Edge: 1095 connects vertex 1090 to vertex 1094
Edge: 1092 connects vertex 1090 to vertex 1082
Edge: 1104 connects vertex 1094 to vertex 1096
Edge: 1103 connects vertex 1094 to vertex 1099
Edge: 1106 connects vertex 1096 to vertex 1101
Edge: 1105 connects vertex 1096 to vertex 1102
Edge: 1052 connects vertex 1097 to vertex 1040
Edge: 1110 connects vertex 1099 to vertex 1111
Edge: 1108 connects vertex 1100 to vertex 1111
Edge: 1109 connects vertex 1101 to vertex 1111
Edge: 1107 connects vertex 1102 to vertex 1100
Edge: 1171 connects vertex 1111 to vertex 1170
Edge: 1121 connects vertex 1111 to vertex 1116
Edge: 1120 connects vertex 1111 to vertex 1115
Edge: 1119 connects vertex 1111 to vertex 1114
Edge: 1118 connects vertex 1111 to vertex 1113
Edge: 1117 connects vertex 1111 to vertex 1112
Edge: 1130 connects vertex 1112 to vertex 1122
Edge: 1129 connects vertex 1113 to vertex 1122
Edge: 1128 connects vertex 1114 to vertex 1122
Edge: 1127 connects vertex 1115 to vertex 1122
Edge: 1126 connects vertex 1116 to vertex 1122
Edge: 1131 connects vertex 1122 to vertex 1125
Edge: 1123 connects vertex 1122 to vertex 1041
Edge: 1140 connects vertex 1125 to vertex 1132
Edge: 1124 connects vertex 1125 to vertex 1036
Edge: 1141 connects vertex 1132 to vertex 1133
Edge: 1143 connects vertex 1133 to vertex 1134
Edge: 1142 connects vertex 1133 to vertex 1135
Edge: 1155 connects vertex 1134 to vertex 1148
Edge: 1144 connects vertex 1135 to vertex 1136
Edge: 1147 connects vertex 1136 to vertex 1137
Edge: 1146 connects vertex 1136 to vertex 1138
Edge: 1145 connects vertex 1136 to vertex 1139
Edge: 1159 connects vertex 1137 to vertex 1156
Edge: 1160 connects vertex 1138 to vertex 1156
Edge: 1161 connects vertex 1139 to vertex 1156
Edge: 1154 connects vertex 1148 to vertex 1149
Edge: 1153 connects vertex 1148 to vertex 1150
Edge: 1152 connects vertex 1148 to vertex 1151
Edge: 1164 connects vertex 1149 to vertex 1156
Edge: 1163 connects vertex 1150 to vertex 1156
Edge: 1162 connects vertex 1151 to vertex 1156
Edge: 1158 connects vertex 1156 to vertex 1157
Edge: 1166 connects vertex 1157 to vertex 1165
Edge: 1173 connects vertex 1168 to vertex 1061
Edge: 1172 connects vertex 1170 to vertex 1122

Number of paths to test: 5184

Page 10:
Shape ID: 1, Type: Shape, Master = 4, Text: Start
Shape ID: 2, Type: Shape, Master = null, Text: Delta Dental
In-Queue Call Flow
Shape ID: 3, Type: Shape, Master = 11, Text: Read variables from inqueue data table
Shape ID: 4, Type: Shape, Master = 9, Text: Datatable: BusinessUnit_CallerType_CallType_Language In-queue Routing In-Queue
Shape ID: 7, Type: Shape, Master = 11, Text: Read variables from inqueue data table
Shape ID: 8, Type: Shape, Master = 9, Text: Datatable: Transfer Code In-queue Routing In-Queue
Shape ID: 9, Type: Shape, Master = 6, Text: Set Data: BU Values
Shape ID: 11, Type: Shape, Master = 6, Text: Set Data: TC Values
Shape ID: 13, Type: Shape, Master = 8, Text: If TC  Values = Not Set or Empty
Shape ID: 14, Type: Shape, Master = 6, Text: Set Data: InQ Value = BU Value
Shape ID: 15, Type: Shape, Master = 6, Text: Set Data: InQ Value = TC Value
Shape ID: 16, Type: Shape, Master = 4, Text: Disconnect
Shape ID: 17, Type: Shape, Master = 8, Text: Voicemail flag?
Shape ID: 18, Type: Shape, Master = 2, Text: Transfer
To Queue Voicemail
Shape ID: 21, Type: Shape, Master = 5, Text: Play Prompt: Voicemail Message
Shape ID: 28, Type: Shape, Master = 9, Text: Voicemail Data Table
Shape ID: 29, Type: Foreign, Master = null
Shape ID: 31, Type: Shape, Master = 6, Text: Split Voicemail Timer by ,
Shape ID: 32, Type: Shape, Master = 8, Text: If( Voicemail Timer Count = 1)
Shape ID: 33, Type: Shape, Master = 8, Text: Time in Queue >= Voicemail Timer[0]
Shape ID: 38, Type: Shape, Master = 8, Text: If( Voicemail Offer Count < Voicemail Timer Count)
Shape ID: 40, Type: Shape, Master = 8, Text: Time in Queue >= Voicemail Timer[Voicemail Offer Count]
Shape ID: 41, Type: Shape, Master = 6, Text: Voicemail Offer Count + 1
Shape ID: 49, Type: Shape, Master = 9, Text: Message and Music Table
Shape ID: 50, Type: Shape, Master = 6, Text: Split Music Time by ,
Shape ID: 51, Type: Shape, Master = 8, Text: If( Music Time Count = 1)
Shape ID: 52, Type: Shape, Master = 8, Text: If(Music Time[0] is NotSetorEmpty
Shape ID: 53, Type: Shape, Master = 5, Text: Play Hold Music: 60 Seconds
Shape ID: 54, Type: Shape, Master = 5, Text: Play Hold Music: Music Time[0]
Shape ID: 55, Type: Shape, Master = 8, Text: If( Music Played Count < Music Time Count)
Shape ID: 56, Type: Shape, Master = 5, Text: Play Hold Music: Music Time[Music Played Count]
Shape ID: 57, Type: Shape, Master = 6, Text: Music Played Count +1
Shape ID: 58, Type: Shape, Master = 8, Text: If( Wait Message Count = 1)
Shape ID: 59, Type: Shape, Master = 5, Text: Play Prompt: Wait Message[0]
Shape ID: 60, Type: Shape, Master = 8, Text: If( WM Played Count < Wait Message Count)
Shape ID: 61, Type: Shape, Master = 6, Text: Wait Message Count +1
Shape ID: 62, Type: Shape, Master = 6, Text: Split Wait Message by ,
Shape ID: 63, Type: Shape, Master = 5, Text: Play Prompt: Wait Message[Wait Message Count]
Shape ID: 64, Type: Shape, Master = 5, Text: Play Prompt: Wait Message Loop[Wait Loop Count]
Shape ID: 87, Type: Shape, Master = 8, Text: If( Voicemail Timer[Voicemail Offer Count] = x
Shape ID: 90, Type: Shape, Master = 4, Text: Disconnect
Shape ID: 92, Type: Foreign, Master = null
Shape ID: 94, Type: Shape, Master = 8, Text: Time in Queue >= Transfer Timer
Shape ID: 96, Type: Shape, Master = 2, Text: Transfer to Transfer Target[1]
Shape ID: 98, Type: Shape, Master = 6, Text: Split Transfer Target by :
Shape ID: 99, Type: Shape, Master = 8, Text: If Transfer Target[0] = Q
Shape ID: 100, Type: Shape, Master = 2, Text: Transfer to Transfer Target[1]
Shape ID: 104, Type: Shape, Master = null, Text: Transfer Target will be:
Q:QueueName
or
#:TransferNumber
Shape ID: 105, Type: Shape, Master = 6, Text: Wait Loop Count +1
Shape ID: 106, Type: Shape, Master = 8, Text: If(Wait Loop Count = Wait Message Loop Count
Shape ID: 107, Type: Shape, Master = 6, Text: Wait Loop Count = 0
Shape ID: 112, Type: Shape, Master = 6, Text: GetEWT(Queue)
Shape ID: 117, Type: Shape, Master = 9, Text: EWT Data Table
Shape ID: 118, Type: Shape, Master = null, Text: EWT ranges will have three values. EX: 0,3:PromptName
Shape ID: 119, Type: Shape, Master = 6, Text: Split EWT Range * by :
Shape ID: 120, Type: Shape, Master = 6, Text: Split R*Range by ,
Shape ID: 121, Type: Shape, Master = 6, Text: Update Data: R*Range = Range 1[0]
Shape ID: 122, Type: Shape, Master = 6, Text: Update Data: R*Prompt = Range 1[1]
Shape ID: 123, Type: Shape, Master = 6, Text: Update Data: R*Lower = R*Range[0]
Shape ID: 124, Type: Shape, Master = 6, Text: Update Data: R*Upper = R*Range[1]
Shape ID: 132, Type: Shape, Master = null, Text: When using a split, the variable becomes a list. The number in [*] refer to the index of that list.
Shape ID: 133, Type: Shape, Master = 8, Text: If( EWT >= R1Lower AND EWT < R1Higher)
Shape ID: 134, Type: Shape, Master = 5, Text: Play Prompt: R1Prompt
Shape ID: 135, Type: Shape, Master = 8, Text: If( EWT >= R4Lower AND EWT < R4Higher)
Shape ID: 136, Type: Shape, Master = 5, Text: Play Prompt: R4Prompt
Shape ID: 137, Type: Shape, Master = 8, Text: If( EWT >= R2Lower AND EWT < R2Higher)
Shape ID: 138, Type: Shape, Master = 5, Text: Play Prompt: R2Prompt
Shape ID: 139, Type: Shape, Master = 8, Text: If( EWT >= R3Lower AND EWT < R3Higher)
Shape ID: 140, Type: Shape, Master = 5, Text: Play Prompt: R3Prompt
Shape ID: 141, Type: Shape, Master = 8, Text: Switch – Take first that is true
Shape ID: 142, Type: Shape, Master = 8, Text: If( EWT >= R*Lower AND EWT < R*Higher)
Shape ID: 143, Type: Shape, Master = 5, Text: Play Prompt: R*Prompt
Shape ID: 154, Type: Shape, Master = null, Text: Replace the * with the number of the range. Action is repeated for all 10 EWT Ranges
Shape ID: 155, Type: Foreign, Master = null
Shape ID: 158, Type: Shape, Master = 8, Text: If(R*Prompt = N)
Shape ID: 161, Type: Shape, Master = 8, Text: If( Wait Message[Wait Message Count] = EWT)
Shape ID: 162, Type: Shape, Master = 6, Text: Wait Message Count +1
Shape ID: 166, Type: Foreign, Master = null
Shape ID: 167, Type: Foreign, Master = null
Shape ID: 169, Type: Shape, Master = 6, Text: Split Priority Rate by |
Shape ID: 170, Type: Shape, Master = 8, Text: Agent Available?
Shape ID: 171, Type: Shape, Master = 4, Text: Route Call  to Agent
Shape ID: 173, Type: Shape, Master = 6, Text: Update Data: Priority Timer = Priority Rate[0]
Shape ID: 174, Type: Shape, Master = 6, Text: Update Data: Priority Interval = Priority Rate[1]
Shape ID: 175, Type: Shape, Master = 6, Text: Update Data: Priority Max = Priority Rate[2]
Shape ID: 178, Type: Shape, Master = 8, Text: Priority < Priority Max
Shape ID: 179, Type: Shape, Master = 8, Text: Priority Update Timer is notSetorEmpty
Shape ID: 180, Type: Shape, Master = 8, Text: Time in Queue >= Priority Timer
Shape ID: 181, Type: Shape, Master = 6, Text: Update Data: Priority = Priority + Priority Interval
Shape ID: 182, Type: Shape, Master = 6, Text: Update Data: Priority Update Timer = Current Time
Shape ID: 183, Type: Shape, Master = 8, Text: Priority Update Timer >= Priority Timer
Shape ID: 184, Type: Shape, Master = 6, Text: Update Data: Priority = Priority + Priority Interval
Shape ID: 185, Type: Shape, Master = 6, Text: Update Data: Priority Update Timer = Current Time
Shape ID: 1001, Type: Shape, Master = 8, Text: Transfer Timer is Set
Shape ID: 1005, Type: Shape, Master = 8, Text: Overnight Schedule is set
Shape ID: 1006, Type: Shape, Master = 8, Text: Overnight Schedule
Shape ID: 1007, Type: Shape, Master = 11, Text: Set Data: Overnight from Day = True
Shape ID: 1010, Type: Shape, Master = 2, Text: Transfer to Overnight Queue
Page 10 has 92 vertices and 115 edges

Graph notation of page 10:
Vertices:
Vertex: 100, InDegree: 1, OutDegree: 0, Text: Transfer to Transfer Target[1]
Vertex: 123, InDegree: 1, OutDegree: 1, Text: Update Data: R*Lower = R*Range[0]
Vertex: 178, InDegree: 2, OutDegree: 2, Text: Priority < Priority Max
Vertex: 107, InDegree: 1, OutDegree: 1, Text: Wait Loop Count = 0
Vertex: 4, InDegree: 1, OutDegree: 2, Text: Datatable: BusinessUnit_CallerType_CallType_Language In-queue Routing In-Queue
Vertex: 1, InDegree: 0, OutDegree: 1, Text: Start
Vertex: 62, InDegree: 4, OutDegree: 1, Text: Split Wait Message by ,
Vertex: 33, InDegree: 1, OutDegree: 2, Text: Time in Queue >= Voicemail Timer[0]
Vertex: 119, InDegree: 1, OutDegree: 1, Text: Split EWT Range * by :
Vertex: 49, InDegree: 5, OutDegree: 2, Text: Message and Music Table
Vertex: 181, InDegree: 1, OutDegree: 1, Text: Update Data: Priority = Priority + Priority Interval
Vertex: 41, InDegree: 1, OutDegree: 1, Text: Voicemail Offer Count + 1
Vertex: 140, InDegree: 1, OutDegree: 1, Text: Play Prompt: R3Prompt
Vertex: 124, InDegree: 1, OutDegree: 1, Text: Update Data: R*Upper = R*Range[1]
Vertex: 59, InDegree: 1, OutDegree: 1, Text: Play Prompt: Wait Message[0]
Vertex: 141, InDegree: 1, OutDegree: 5, Text: Switch – Take first that is true
Vertex: 14, InDegree: 1, OutDegree: 1, Text: Set Data: InQ Value = BU Value
Vertex: 90, InDegree: 1, OutDegree: 0, Text: Disconnect
Vertex: 180, InDegree: 1, OutDegree: 2, Text: Time in Queue >= Priority Timer
Vertex: 40, InDegree: 1, OutDegree: 2, Text: Time in Queue >= Voicemail Timer[Voicemail Offer Count]
Vertex: 137, InDegree: 1, OutDegree: 1, Text: If( EWT >= R2Lower AND EWT < R2Higher)
Vertex: 60, InDegree: 1, OutDegree: 2, Text: If( WM Played Count < Wait Message Count)
Vertex: 135, InDegree: 1, OutDegree: 1, Text: If( EWT >= R4Lower AND EWT < R4Higher)
Vertex: 56, InDegree: 1, OutDegree: 1, Text: Play Hold Music: Music Time[Music Played Count]
Vertex: 138, InDegree: 1, OutDegree: 1, Text: Play Prompt: R2Prompt
Vertex: 183, InDegree: 1, OutDegree: 2, Text: Priority Update Timer >= Priority Timer
Vertex: 169, InDegree: 1, OutDegree: 1, Text: Split Priority Rate by |
Vertex: 64, InDegree: 2, OutDegree: 1, Text: Play Prompt: Wait Message Loop[Wait Loop Count]
Vertex: 173, InDegree: 1, OutDegree: 1, Text: Update Data: Priority Timer = Priority Rate[0]
Vertex: 179, InDegree: 1, OutDegree: 2, Text: Priority Update Timer is notSetorEmpty
Vertex: 51, InDegree: 1, OutDegree: 2, Text: If( Music Time Count = 1)
Vertex: 31, InDegree: 1, OutDegree: 1, Text: Split Voicemail Timer by ,
Vertex: 133, InDegree: 1, OutDegree: 1, Text: If( EWT >= R1Lower AND EWT < R1Higher)
Vertex: 142, InDegree: 1, OutDegree: 1, Text: If( EWT >= R*Lower AND EWT < R*Higher)
Vertex: 112, InDegree: 1, OutDegree: 1, Text: GetEWT(Queue)
Vertex: 7, InDegree: 1, OutDegree: 1, Text: Read variables from inqueue data table
Vertex: 52, InDegree: 1, OutDegree: 2, Text: If(Music Time[0] is NotSetorEmpty
Vertex: 158, InDegree: 1, OutDegree: 2, Text: If(R*Prompt = N)
Vertex: 18, InDegree: 1, OutDegree: 1, Text: Transfer
To Queue Voicemail
Vertex: 175, InDegree: 1, OutDegree: 1, Text: Update Data: Priority Max = Priority Rate[2]
Vertex: 61, InDegree: 1, OutDegree: 1, Text: Wait Message Count +1
Vertex: 32, InDegree: 1, OutDegree: 2, Text: If( Voicemail Timer Count = 1)
Vertex: 13, InDegree: 1, OutDegree: 2, Text: If TC  Values = Not Set or Empty
Vertex: 136, InDegree: 1, OutDegree: 1, Text: Play Prompt: R4Prompt
Vertex: 134, InDegree: 1, OutDegree: 1, Text: Play Prompt: R1Prompt
Vertex: 96, InDegree: 1, OutDegree: 0, Text: Transfer to Transfer Target[1]
Vertex: 57, InDegree: 1, OutDegree: 1, Text: Music Played Count +1
Vertex: 1006, InDegree: 1, OutDegree: 2, Text: Overnight Schedule
Vertex: 98, InDegree: 1, OutDegree: 1, Text: Split Transfer Target by :
Vertex: 28, InDegree: 1, OutDegree: 2, Text: Voicemail Data Table
Vertex: 1001, InDegree: 3, OutDegree: 2, Text: Transfer Timer is Set
Vertex: 9, InDegree: 1, OutDegree: 1, Text: Set Data: BU Values
Vertex: 106, InDegree: 2, OutDegree: 2, Text: If(Wait Loop Count = Wait Message Loop Count
Vertex: 139, InDegree: 1, OutDegree: 1, Text: If( EWT >= R3Lower AND EWT < R3Higher)
Vertex: 58, InDegree: 1, OutDegree: 2, Text: If( Wait Message Count = 1)
Vertex: 167, InDegree: 1, OutDegree: 0, Text: 
Vertex: 63, InDegree: 1, OutDegree: 1, Text: Play Prompt: Wait Message[Wait Message Count]
Vertex: 171, InDegree: 1, OutDegree: 0, Text: Route Call  to Agent
Vertex: 105, InDegree: 1, OutDegree: 1, Text: Wait Loop Count +1
Vertex: 1007, InDegree: 1, OutDegree: 1, Text: Set Data: Overnight from Day = True
Vertex: 16, InDegree: 1, OutDegree: 0, Text: Disconnect
Vertex: 122, InDegree: 1, OutDegree: 1, Text: Update Data: R*Prompt = Range 1[1]
Vertex: 143, InDegree: 1, OutDegree: 1, Text: Play Prompt: R*Prompt
Vertex: 117, InDegree: 1, OutDegree: 1, Text: EWT Data Table
Vertex: 38, InDegree: 1, OutDegree: 2, Text: If( Voicemail Offer Count < Voicemail Timer Count)
Vertex: 55, InDegree: 1, OutDegree: 2, Text: If( Music Played Count < Music Time Count)
Vertex: 1010, InDegree: 1, OutDegree: 0, Text: Transfer to Overnight Queue
Vertex: 8, InDegree: 1, OutDegree: 2, Text: Datatable: Transfer Code In-queue Routing In-Queue
Vertex: 166, InDegree: 1, OutDegree: 0, Text: 
Vertex: 184, InDegree: 1, OutDegree: 1, Text: Update Data: Priority = Priority + Priority Interval
Vertex: 120, InDegree: 1, OutDegree: 1, Text: Split R*Range by ,
Vertex: 53, InDegree: 1, OutDegree: 1, Text: Play Hold Music: 60 Seconds
Vertex: 99, InDegree: 1, OutDegree: 2, Text: If Transfer Target[0] = Q
Vertex: 50, InDegree: 1, OutDegree: 1, Text: Split Music Time by ,
Vertex: 29, InDegree: 1, OutDegree: 0, Text: 
Vertex: 17, InDegree: 2, OutDegree: 2, Text: Voicemail flag?
Vertex: 1005, InDegree: 1, OutDegree: 2, Text: Overnight Schedule is set
Vertex: 170, InDegree: 5, OutDegree: 1, Text: Agent Available?
Vertex: 162, InDegree: 6, OutDegree: 1, Text: Wait Message Count +1
Vertex: 161, InDegree: 1, OutDegree: 2, Text: If( Wait Message[Wait Message Count] = EWT)
Vertex: 3, InDegree: 2, OutDegree: 1, Text: Read variables from inqueue data table
Vertex: 87, InDegree: 1, OutDegree: 2, Text: If( Voicemail Timer[Voicemail Offer Count] = x
Vertex: 182, InDegree: 1, OutDegree: 1, Text: Update Data: Priority Update Timer = Current Time
Vertex: 174, InDegree: 1, OutDegree: 1, Text: Update Data: Priority Interval = Priority Rate[1]
Vertex: 11, InDegree: 1, OutDegree: 1, Text: Set Data: TC Values
Vertex: 94, InDegree: 1, OutDegree: 2, Text: Time in Queue >= Transfer Timer
Vertex: 21, InDegree: 2, OutDegree: 2, Text: Play Prompt: Voicemail Message
Vertex: 185, InDegree: 1, OutDegree: 1, Text: Update Data: Priority Update Timer = Current Time
Vertex: 15, InDegree: 1, OutDegree: 1, Text: Set Data: InQ Value = TC Value
Vertex: 121, InDegree: 1, OutDegree: 1, Text: Update Data: R*Range = Range 1[0]
Vertex: 54, InDegree: 1, OutDegree: 1, Text: Play Hold Music: Music Time[0]
Vertex: 92, InDegree: 1, OutDegree: 0, Text: 

Edges:
Edge: 5 connects vertex 1 to vertex 1005
Edge: 85 connects vertex 3 to vertex 4
Edge: 168 connects vertex 4 to vertex 167
Edge: 6 connects vertex 4 to vertex 9
Edge: 86 connects vertex 7 to vertex 8
Edge: 1004 connects vertex 8 to vertex 166
Edge: 12 connects vertex 8 to vertex 11
Edge: 10 connects vertex 9 to vertex 7
Edge: 23 connects vertex 11 to vertex 13
Edge: 24 connects vertex 13 to vertex 14
Edge: 25 connects vertex 13 to vertex 15
Edge: 26 connects vertex 14 to vertex 17
Edge: 27 connects vertex 15 to vertex 17
Edge: 30 connects vertex 17 to vertex 28
Edge: 20 connects vertex 17 to vertex 49
Edge: 19 connects vertex 18 to vertex 16
Edge: 22 connects vertex 21 to vertex 18
Edge: 45 connects vertex 21 to vertex 49
Edge: 35 connects vertex 28 to vertex 31
Edge: 37 connects vertex 28 to vertex 29
Edge: 34 connects vertex 31 to vertex 32
Edge: 36 connects vertex 32 to vertex 33
Edge: 46 connects vertex 32 to vertex 38
Edge: 44 connects vertex 33 to vertex 21
Edge: 47 connects vertex 33 to vertex 49
Edge: 39 connects vertex 38 to vertex 87
Edge: 48 connects vertex 38 to vertex 49
Edge: 89 connects vertex 40 to vertex 49
Edge: 42 connects vertex 40 to vertex 41
Edge: 43 connects vertex 41 to vertex 21
Edge: 93 connects vertex 49 to vertex 92
Edge: 65 connects vertex 49 to vertex 50
Edge: 66 connects vertex 50 to vertex 51
Edge: 67 connects vertex 51 to vertex 52
Edge: 70 connects vertex 51 to vertex 55
Edge: 68 connects vertex 52 to vertex 53
Edge: 69 connects vertex 52 to vertex 54
Edge: 1014 connects vertex 53 to vertex 62
Edge: 71 connects vertex 54 to vertex 62
Edge: 75 connects vertex 55 to vertex 62
Edge: 72 connects vertex 55 to vertex 56
Edge: 73 connects vertex 56 to vertex 57
Edge: 74 connects vertex 57 to vertex 62
Edge: 78 connects vertex 58 to vertex 60
Edge: 77 connects vertex 58 to vertex 59
Edge: 84 connects vertex 59 to vertex 1001
Edge: 81 connects vertex 60 to vertex 106
Edge: 79 connects vertex 60 to vertex 161
Edge: 83 connects vertex 61 to vertex 1001
Edge: 76 connects vertex 62 to vertex 58
Edge: 80 connects vertex 63 to vertex 61
Edge: 109 connects vertex 64 to vertex 105
Edge: 91 connects vertex 87 to vertex 90
Edge: 88 connects vertex 87 to vertex 40
Edge: 97 connects vertex 94 to vertex 169
Edge: 95 connects vertex 94 to vertex 98
Edge: 103 connects vertex 98 to vertex 99
Edge: 102 connects vertex 99 to vertex 96
Edge: 101 connects vertex 99 to vertex 100
Edge: 82 connects vertex 105 to vertex 1001
Edge: 110 connects vertex 106 to vertex 107
Edge: 108 connects vertex 106 to vertex 64
Edge: 111 connects vertex 107 to vertex 64
Edge: 113 connects vertex 112 to vertex 117
Edge: 125 connects vertex 117 to vertex 119
Edge: 126 connects vertex 119 to vertex 121
Edge: 129 connects vertex 120 to vertex 123
Edge: 127 connects vertex 121 to vertex 122
Edge: 128 connects vertex 122 to vertex 120
Edge: 130 connects vertex 123 to vertex 124
Edge: 131 connects vertex 124 to vertex 158
Edge: 149 connects vertex 133 to vertex 134
Edge: 116 connects vertex 134 to vertex 162
Edge: 152 connects vertex 135 to vertex 136
Edge: 156 connects vertex 136 to vertex 162
Edge: 150 connects vertex 137 to vertex 138
Edge: 115 connects vertex 138 to vertex 162
Edge: 151 connects vertex 139 to vertex 140
Edge: 114 connects vertex 140 to vertex 162
Edge: 148 connects vertex 141 to vertex 142
Edge: 147 connects vertex 141 to vertex 135
Edge: 146 connects vertex 141 to vertex 139
Edge: 145 connects vertex 141 to vertex 137
Edge: 144 connects vertex 141 to vertex 133
Edge: 153 connects vertex 142 to vertex 143
Edge: 157 connects vertex 143 to vertex 162
Edge: 160 connects vertex 158 to vertex 162
Edge: 159 connects vertex 158 to vertex 141
Edge: 164 connects vertex 161 to vertex 63
Edge: 163 connects vertex 161 to vertex 112
Edge: 165 connects vertex 162 to vertex 106
Edge: 1000 connects vertex 169 to vertex 173
Edge: 172 connects vertex 170 to vertex 171
Edge: 176 connects vertex 173 to vertex 174
Edge: 177 connects vertex 174 to vertex 175
Edge: 186 connects vertex 175 to vertex 178
Edge: 188 connects vertex 178 to vertex 179
Edge: 187 connects vertex 178 to vertex 170
Edge: 192 connects vertex 179 to vertex 183
Edge: 189 connects vertex 179 to vertex 180
Edge: 193 connects vertex 180 to vertex 170
Edge: 190 connects vertex 180 to vertex 181
Edge: 191 connects vertex 181 to vertex 182
Edge: 198 connects vertex 182 to vertex 170
Edge: 196 connects vertex 183 to vertex 170
Edge: 194 connects vertex 183 to vertex 184
Edge: 195 connects vertex 184 to vertex 185
Edge: 197 connects vertex 185 to vertex 170
Edge: 1003 connects vertex 1001 to vertex 178
Edge: 1002 connects vertex 1001 to vertex 94
Edge: 1012 connects vertex 1005 to vertex 3
Edge: 1008 connects vertex 1005 to vertex 1006
Edge: 1013 connects vertex 1006 to vertex 3
Edge: 1009 connects vertex 1006 to vertex 1007
Edge: 1011 connects vertex 1007 to vertex 1010

Number of paths to test: 15372

Page 11:
Shape ID: 1, Type: Shape, Master = 4, Text: Start
Shape ID: 2, Type: Shape, Master = 11, Text: Get Data: Delay
Shape ID: 3, Type: Shape, Master = null, Text: Delta Dental
Trigger Proactive Callback Call Flow
Shape ID: 5, Type: Shape, Master = 9, Text: Execute Workflow Data Action
Shape ID: 7, Type: Shape, Master = 4, Text: Disconnect
Shape ID: 8, Type: Shape, Master = 5, Text: Play Prompt: Will call back when agent available.
Shape ID: 11, Type: Shape, Master = null, Text: 
Shape ID: 12, Type: Shape, Master = null, Text: Delta Dental
Customer First WorkFlow
Shape ID: 13, Type: Foreign, Master = null
Shape ID: 14, Type: Shape, Master = 4, Text: Start
Shape ID: 15, Type: Shape, Master = 8, Text: Flow.Phone is set
Shape ID: 16, Type: Shape, Master = 4, Text: Exit Workflow: NoPhoneNumber
Shape ID: 17, Type: Shape, Master = 9, Text: Create Placeholder Callback Data Action
Shape ID: 18, Type: Shape, Master = 6, Text: Wait for Delay
Shape ID: 19, Type: Shape, Master = 8, Text: Check Schedule
Shape ID: 20, Type: Shape, Master = 9, Text: Get Interaction State Data Action
Shape ID: 21, Type: Foreign, Master = null
Shape ID: 22, Type: Foreign, Master = null
Shape ID: 23, Type: Shape, Master = 4, Text: Exit Workflow: Canceled Callback
Shape ID: 24, Type: Shape, Master = 9, Text: Add Contact to Contact List
Shape ID: 25, Type: Foreign, Master = null
Shape ID: 26, Type: Shape, Master = 4, Text: Exit Workflow: Success
Shape ID: 36, Type: Shape, Master = null, Text: 
Shape ID: 37, Type: Shape, Master = null, Text: Delta Dental
Outbound Callback Menu
Shape ID: 38, Type: Shape, Master = 4, Text: Customer Answers
Shape ID: 39, Type: Shape, Master = 5, Text: Play Prompt: We are returning your call.
Shape ID: 40, Type: Shape, Master = 5, Text: Play Prompt: Would you like to speak to an agent?
Shape ID: 41, Type: Shape, Master = 8, Text: Menu Option
Shape ID: 44, Type: Foreign, Master = null
Shape ID: 54, Type: Shape, Master = 10, Text: Option 1
Shape ID: 58, Type: Shape, Master = null, Text: 
Shape ID: 1000, Type: Shape, Master = 9, Text: Disconnect Callback Data Action
Shape ID: 1001, Type: Shape, Master = 2, Text: Transfer: Queue
Shape ID: 1003, Type: Shape, Master = 5, Text: Play Prompt: Thank you for calling. Goodbye.
Shape ID: 1004, Type: Shape, Master = 9, Text: Disconnect Callback Data Action
Shape ID: 1005, Type: Shape, Master = 4, Text: Disconnect
Shape ID: 59, Type: Foreign, Master = null
Shape ID: 1008, Type: Shape, Master = 9, Text: Execute Workflow Data Action
Shape ID: 60, Type: Foreign, Master = null
Shape ID: 1009, Type: Shape, Master = 5, Text: Play Prompt: Will call back in five minutes.
Shape ID: 1010, Type: Shape, Master = 4, Text: Disconnect
Shape ID: 1013, Type: Shape, Master = 8, Text: State = Disconnected
Page 11 has 28 vertices and 25 edges

Graph notation of page 11:
Vertices:
Vertex: 16, InDegree: 1, OutDegree: 0, Text: Exit Workflow: NoPhoneNumber
Vertex: 26, InDegree: 1, OutDegree: 0, Text: Exit Workflow: Success
Vertex: 1003, InDegree: 1, OutDegree: 1, Text: Play Prompt: Thank you for calling. Goodbye.
Vertex: 7, InDegree: 1, OutDegree: 0, Text: Disconnect
Vertex: 23, InDegree: 2, OutDegree: 0, Text: Exit Workflow: Canceled Callback
Vertex: 15, InDegree: 1, OutDegree: 2, Text: Flow.Phone is set
Vertex: 5, InDegree: 1, OutDegree: 1, Text: Execute Workflow Data Action
Vertex: 17, InDegree: 1, OutDegree: 1, Text: Create Placeholder Callback Data Action
Vertex: 1009, InDegree: 1, OutDegree: 1, Text: Play Prompt: Will call back in five minutes.
Vertex: 1005, InDegree: 1, OutDegree: 0, Text: Disconnect
Vertex: 1, InDegree: 0, OutDegree: 1, Text: Start
Vertex: 18, InDegree: 1, OutDegree: 1, Text: Wait for Delay
Vertex: 1013, InDegree: 1, OutDegree: 2, Text: State = Disconnected
Vertex: 20, InDegree: 1, OutDegree: 1, Text: Get Interaction State Data Action
Vertex: 38, InDegree: 0, OutDegree: 1, Text: Customer Answers
Vertex: 1000, InDegree: 0, OutDegree: 1, Text: Disconnect Callback Data Action
Vertex: 1004, InDegree: 1, OutDegree: 1, Text: Disconnect Callback Data Action
Vertex: 1010, InDegree: 1, OutDegree: 0, Text: Disconnect
Vertex: 8, InDegree: 1, OutDegree: 1, Text: Play Prompt: Will call back when agent available.
Vertex: 1008, InDegree: 1, OutDegree: 1, Text: Execute Workflow Data Action
Vertex: 24, InDegree: 1, OutDegree: 1, Text: Add Contact to Contact List
Vertex: 39, InDegree: 1, OutDegree: 1, Text: Play Prompt: We are returning your call.
Vertex: 14, InDegree: 0, OutDegree: 1, Text: Start
Vertex: 40, InDegree: 1, OutDegree: 1, Text: Play Prompt: Would you like to speak to an agent?
Vertex: 1001, InDegree: 1, OutDegree: 0, Text: Transfer: Queue
Vertex: 2, InDegree: 1, OutDegree: 1, Text: Get Data: Delay
Vertex: 19, InDegree: 1, OutDegree: 2, Text: Check Schedule
Vertex: 41, InDegree: 1, OutDegree: 2, Text: Menu Option

Edges:
Edge: 4 connects vertex 1 to vertex 2
Edge: 6 connects vertex 2 to vertex 5
Edge: 9 connects vertex 5 to vertex 8
Edge: 10 connects vertex 8 to vertex 7
Edge: 27 connects vertex 14 to vertex 15
Edge: 29 connects vertex 15 to vertex 17
Edge: 28 connects vertex 15 to vertex 16
Edge: 30 connects vertex 17 to vertex 18
Edge: 31 connects vertex 18 to vertex 20
Edge: 34 connects vertex 19 to vertex 1013
Edge: 33 connects vertex 19 to vertex 23
Edge: 32 connects vertex 20 to vertex 19
Edge: 35 connects vertex 24 to vertex 26
Edge: 49 connects vertex 38 to vertex 39
Edge: 50 connects vertex 39 to vertex 40
Edge: 51 connects vertex 40 to vertex 41
Edge: 57 connects vertex 41 to vertex 1008
Edge: 52 connects vertex 41 to vertex 1003
Edge: 1002 connects vertex 1000 to vertex 1001
Edge: 1006 connects vertex 1003 to vertex 1004
Edge: 1007 connects vertex 1004 to vertex 1005
Edge: 1011 connects vertex 1008 to vertex 1009
Edge: 1012 connects vertex 1009 to vertex 1010
Edge: 1015 connects vertex 1013 to vertex 23
Edge: 1014 connects vertex 1013 to vertex 24

Number of paths to test: 7
