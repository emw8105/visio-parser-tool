Possibly helpful to implement: see if the edge between the vertexes in the path can have it's text printed (if it has any)

Notes and Documentation:
	This POC exists to show the process of taking an input .vsdx visio file, unzipping it into it's xml components,
	and parsing through them to find the original diagram data.

	When running, there is a Console.ReadLine line meant to stop the program after the files have been extracted and parsed.
	First, navigate to the extracted folder --> visio --> pages, there you will find the pages of the visio file with the contained shape information.
	Shapes have various properties including id, type, master, text, positional data, etc., but not all shapes have all of these (except for ID).
	ex: <PageContents> --> <Shapes> --> <Shape ID = '1' Type='Shape' Master = '2'> --> ... <Text>

	Sometimes, we can have <Shapes> --> ... --> <Shapes>, i.e. nested shapes, these shapes don't have various data such as a type or positional info, so
	they need to be handled separately although their use case is rare, ex: page 83 of ECC IVR Call Flow V104.1_updated.vsdx has a few of these nested shapes.

	Relationships between shapes are found in the Connects tab of the xml file following the shapes:
	<PageContents> --> <Connects> --> <Connect FromSheet='15' FromCell='BeginX' FromPart='9' ToSheet='14' ToCell='PinX' ToPart='3'/>
	i.e. source shape w/ ID 15 connects to the target shape w/ ID 14, using the 9th node from the source shape and the 3rd node from the target shape
	connections come in pairs of 2 because the graph is directional, the 'FromCell' value of origin nodes is 'BeginX' and destination nodes have a value of 'EndX'

	Relationships between parts within the package are found in the _rels folder from the extraction

	To show all of the pages, the page count is calculated from the "pages.xml" file within the same folder as the actual pages (page1, page2, etc)
	Parse thru <Pages> and count the number of "Page" attributes to find the number of extracted pages
	Then begin reading the page files and loop through the pages to extract their information

	this approach to parsing page information is used to parse the master shape files as well

	Translating to a graph:
	each page has it's own unique Shape ID's, but some of them are edges stored as connections and some of them are vertices
	to determine which is which, loop through a page's connections and find which ID's are being used to represent a connection and store it as an edge
	then create a vertex for each shape THAT IS NOT AN EDGE
	print the graph at the end of the page
	each visio file has a start and end point, my method for determining them is to find nodes which have only incoming or outgoing edges respectively
	however, this may not work considering some visio files have a break point that is used to show the flow entering from somewhere else
	use the corresponding graph to find all paths from the start to the end

	feel free to use the output files to redirect overflowing console output for larger visio files with several pages


IDEAL VISIO DESIGN PRACTICES
General tips:
- Don't make dense flows, make long ones (i.e. shapes shouldn't have paragraphs of text, the more concise the file is the better it will be for readability later, split into multiple shapes if necessary)
- Make sure that all connections are actually connected
- Non-directed connections won't be used for test case calculation, they can be used to label things for human-readable portions but not for parsing
- Page names must be unique in order to differentiate them for off-page references

Start/End formatting:
- stick to one format for start and end nodes, as well as on-page and off-page references
- To use specified start and end nodes, ensure that start nodes have no edges pointing in to them and end nodes have no edges pointing out of them
- For start and end nodes, try to use a basic shape to ensure that it will have a master ID
- For start nodes, don't attach extra connections for extra visualization (i.e. a picture of a person to represent an agent pointing into a start node)
	- start nodes should not have any incoming connections, end nodes should not have any outgoing connections, else they will not be recognized properly

Reference formatting:
- Avoid using connections in a legend page or other non-flow page to prevent unnecessary paths from being generated when parsing indiscriminately
- Multiple on-page references must be used appropriately, avoid using more than one pair of start/end on-page references with the same identifer on the same page
	- However, multiple on-page end nodes can refer to a single on-page start node and vice-versa, simply don't use the same identifier for more than one pair
- Don't use the on-page reference shape as off-page references, the paths will not traverse through that shape.
- Off-page references must have a matching off-page reference that points back to it
	- If there is not a matching off-page reference to receive the flow, the program will attempt to create an edge to the
	  start node on that page instead, but if there is more than one then the edge placement is not possible to determine
- Make sure that all off-page references have their links attached properly or else the parser can't build a multi-flow path